namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

a:documentation [
  "      --Origin\x{a}" ~
  "      This Relax NG schema is based on the MusicXML 3.0 Specification.\x{a}" ~
  "      \x{a}" ~
  "      --Documentation of the schema\x{a}" ~
  "      Each following documentation is being provided by the MusicXML™ W3C XML schema (XSD) Version 3.0 Copyright © 2004-2011 Recordare LLC. under the MusicXML Document Type Definition Public License Version 2.0, available from: http://www.recordare.com/dtds/license.html\x{a}" ~
  "      \x{a}" ~
  "      --Licence of this Relax NG schema\x{a}" ~
  "      Copyright 2012 Vincent Biragnet, vbiragnet@1500signes.com\x{a}" ~
  '      Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.\x{a}' ~
  "      You may obtain a copy of the License at \x{a}" ~
  "      http://www.apache.org/licenses/LICENSE-2.0\x{a}" ~
  '      Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.   '
]
include "xlink.rnc"
include "datatypes.rnc"
include "i18n-attrib.rnc"
include "xml-attrib.rnc"
start =
  score-partwiseElementDefinition | score-timewiseElementDefinition
score-partwiseElementDefinition =
  
  ## The score-partwise element is the root element for a partwise MusicXML score. It includes a score-header group followed by a series of parts with measures inside. The document-attributes attribute group includes the version attribute.
  element score-partwise {
    score-headerGroup,
    element part {
      element measure {
        music-dataGroup, measure-attributesAttributes
      }+,
      part-attributesAttributes
    }+,
    document-attributesAttributes
  }
score-timewiseElementDefinition =
  
  ## The score-timewise element is the root element for a timewise MusicXML score. It includes a score-header group followed by a series of measures with parts inside. The document-attributes attribute group includes the version attribute.
  element score-timewise {
    score-headerGroup,
    element measure {
      element part { music-dataGroup, part-attributesAttributes }+,
      measure-attributesAttributes
    }+,
    document-attributesAttributes
  }

## The editorial group specifies editorial information for a musical element.
editorialGroup = footnoteGroup?, levelGroup?

## The editorial-voice group supports the common combination of editorial and voice information for a musical element.
editorial-voiceGroup = footnoteGroup?, levelGroup?, voiceGroup?

## The editorial-voice-direction group supports the common combination of editorial and voice information for a direction element. It is separate from the editorial-voice element because extensions and restrictions might be different for directions than for the note and forward elements.
editorial-voice-directionGroup =
  footnoteGroup?, levelGroup?, voiceGroup?

## The footnote element specifies editorial information that appears in footnotes in the printed score. It is defined within a group due to its multiple uses within the MusicXML schema.
footnoteGroup = element footnote { formatted-textDefinition }

## The level element specifies editorial information for different MusicXML elements. It is defined within a group due to its multiple uses within the MusicXML schema.
levelGroup = element level { levelDefinition }

## The staff element is defined within a group due to its use by both notes and direction elements.
staffGroup =
  element staff {
    xsd:positiveInteger
    >> a:documentation [
         "Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part."
       ]
  }

## The tuning group contains the sequence of elements common to the staff-tuning and accord elements.
tuningGroup =
  element tuning-step {
    stepValues
    >> a:documentation [
         "The tuning-step element is represented like the step element, with a different name to reflect is different function."
       ]
  },
  element tuning-alter {
    semitonesValues
    >> a:documentation [
         "The tuning-alter element is represented like the alter element, with a different name to reflect is different function."
       ]
  }?,
  element tuning-octave {
    octaveValues
    >> a:documentation [
         "The tuning-octave element is represented like the octave element, with a different name to reflect is different function."
       ]
  }

## The voice is used to distinguish between multiple voices (what MuseData calls tracks) in individual parts. It is defined within a group due to its multiple uses within the MusicXML schema.
voiceGroup = element voice { xsd:string }

## The non-traditional-key group represents a single alteration within a non-traditional key signature. A sequence of these groups makes up a non-traditional key signature
non-traditional-keyGroup =
  element key-step {
    stepValues
    >> a:documentation [
         "Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-step element indicates the pitch step to be altered, represented using the same names as in the step element."
       ]
  },
  element key-alter {
    semitonesValues
    >> a:documentation [
         "Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-alter element represents the alteration for a given pitch step, represented with semitones in the same manner as the alter element."
       ]
  },
  element key-accidental {
    accidental-valueValues
    >> a:documentation [
         "Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-accidental element indicates the accidental to be displayed in the key signature, represented in the same manner as the accidental element. It is used for disambiguating microtonal accidentals."
       ]
  }?

## The slash group combines elements used for more complete specification of the slash and beat-repeat measure-style elements. They have the same values as the type and dot elements, and define what the beat is for the display of repetition marks. If not present, the beat is based on the current time signature.
slashGroup =
  element slash-type {
    note-type-valueValues
    >> a:documentation [
         "The slash-type element indicates the graphical note type to use for the display of repetition marks."
       ]
  },
  element slash-dot { empty }*

## Time signatures are represented by the beats element for the numerator and the beat-type element for the denominator.
time-signatureGroup =
  element beats {
    xsd:string
    >> a:documentation [
         "The beats element indicates the number of beats, as found in the numerator of a time signature."
       ]
  },
  element beat-type {
    xsd:string
    >> a:documentation [
         "The beat-type element indicates the beat unit, as found in the denominator of a time signature."
       ]
  }

## The traditional-key group represents a traditional key signature using the cycle of fifths.
traditional-keyGroup =
  element cancel { cancelDefinition }?,
  element fifths { fifthsValues },
  element mode { modeValues }?

## The beat-unit group combines elements used repeatedly in the metronome element to specify a note within a metronome mark.
beat-unitGroup =
  element beat-unit {
    note-type-valueValues
    >> a:documentation [
         "The beat-unit element indicates the graphical note type to use in a metronome mark."
       ]
  },
  element beat-unit-dot { empty }*

## A harmony element can contain many stacked chords (e.g. V of II). A sequence of harmony-chord groups is used for this type of secondary function, where V of II would be represented by a harmony-chord with a V function followed by a harmony-chord with a II function.
##	
## A root is a pitch name like C, D, E, where a function is an indication like I, II, III. It is an either/or choice to avoid data inconsistency.
harmony-chordGroup =
  (element root { rootDefinition }
   | element function {
       style-textDefinition
       >> a:documentation [
            "The function element is used to represent classical functional harmony with an indication like I, II, III rather than C, D, E. It is relative to the key that is specified in the MusicXML encoding."
          ]
     }),
  element kind { kindDefinition },
  element inversion { inversionDefinition }?,
  element bass { bassDefinition }?,
  element degree { degreeDefinition }*

## The all-margins group specifies both horizontal and vertical margins in tenths.
all-marginsGroup =
  left-right-marginsGroup,
  element top-margin { tenthsValues },
  element bottom-margin { tenthsValues }

## The layout group specifies the sequence of page, system, and staff layout elements that is common to both the defaults and print elements.
layoutGroup =
  element page-layout { page-layoutDefinition }?,
  element system-layout { system-layoutDefinition }?,
  element staff-layout { staff-layoutDefinition }*

## The left-right-margins group specifies horizontal margins in tenths.
left-right-marginsGroup =
  element left-margin { tenthsValues },
  element right-margin { tenthsValues }

## The duration element is defined within a group due to its uses within the note, figure-bass, backup, and forward elements.
durationGroup =
  element duration {
    positive-divisionsValues
    >> a:documentation [
         "Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes."
       ]
  }

## The display-step-octave group contains the sequence of elements used by both the rest and unpitched elements. This group is used to place rests and unpitched elements on the staff without implying that these elements have pitch. Positioning follows the current clef. If percussion clef is used, the display-step and display-octave elements are interpreted as if in treble clef, with a G in octave 4 on line 2. If not present, the note is placed on the middle line of the staff, generally used for a one-line staff.
display-step-octaveGroup =
  element display-step { stepValues },
  element display-octave { octaveValues }

## The full-note group is a sequence of the common note elements between cue/grace notes and regular (full) notes: pitch, chord, and rest information, but not duration (cue and grace notes do not have duration encoded). Unpitched elements are used for unpitched percussion, speaking voice, and other musical elements lacking determinate pitch.
full-noteGroup =
  element chord { empty }?,
  (element pitch { pitchDefinition }
   | element unpitched { unpitchedDefinition }
   | element rest { restDefinition })

## The music-data group contains the basic musical data that is either associated with a part or a measure, depending on whether the partwise or timewise hierarchy is used.
music-dataGroup =
  (element note { noteDefinition }
   | element backup { backupDefinition }
   | element forward { forwardDefinition }
   | element direction { directionDefinition }
   | element attributes { attributesDefinition }
   | element harmony { harmonyDefinition }
   | element figured-bass { figured-bassDefinition }
   | element print { printDefinition }
   | element sound { soundDefinition }
   | element barline { barlineDefinition }
   | element grouping { groupingDefinition }
   | element link { linkDefinition }
   | element bookmark { bookmarkDefinition })*

## The part-group element is defined within a group due to its multiple uses within the part-list element.
part-groupGroup = element part-group { part-groupDefinition }

## The score-header group contains basic score metadata about the work and movement, score-wide defaults for layout and fonts, credits that appear on the first or following pages, and the part list.
score-headerGroup =
  element work { workDefinition }?,
  element movement-number {
    xsd:string
    >> a:documentation [
         "The movement-number element specifies the number of a movement."
       ]
  }?,
  element movement-title {
    xsd:string
    >> a:documentation [
         "The movement-title element specifies the title of a movement, not including its number."
       ]
  }?,
  element identification { identificationDefinition }?,
  element defaults { defaultsDefinition }?,
  element credit { creditDefinition }*,
  element part-list { part-listDefinition }

## The score-part element is defined within a group due to its multiple uses within the part-list element.
score-partGroup =
  element score-part {
    score-partDefinition
    >> a:documentation [
         "Each MusicXML part corresponds to a track in a Standard MIDI Format 1 file. The score-instrument elements are used when there are multiple instruments per track. The midi-device element is used to make a MIDI device or port assignment for the given track. Initial midi-instrument assignments may be made here as well."
       ]
  }

## The accidental-text type represents an element with an accidental value and text-formatting attributes.
accidental-textDefinition =
  accidental-valueValues, text-formattingAttributes

## Dynamics can be associated either with a note or a general musical direction. To avoid inconsistencies between and amongst the letter abbreviations for dynamics (what is sf vs. sfz, standing alone or with a trailing dynamic that is not always piano), we use the actual letters as the names of these dynamic elements. The other-dynamics element allows other dynamic marks that are not covered here, but many of those should perhaps be included in a more general musical direction element. Dynamics elements may also be combined to create marks not covered by a single element, such as sfmp.
##	
## These letter dynamic symbols are separated from crescendo, decrescendo, and wedge indications. Dynamic representation is inconsistent in scores. Many things are assumed by the composer and left out, such as returns to original dynamics. Systematic representations are quite complex: for example, Humdrum has at least 3 representation formats related to dynamics. The MusicXML format captures what is in the score, but does not try to be optimal for analysis or synthesis of dynamics.
dynamicsDefinition =
  (element p { empty }
   | element pp { empty }
   | element ppp { empty }
   | element pppp { empty }
   | element ppppp { empty }
   | element pppppp { empty }
   | element f { empty }
   | element ff { empty }
   | element fff { empty }
   | element ffff { empty }
   | element fffff { empty }
   | element ffffff { empty }
   | element mp { empty }
   | element mf { empty }
   | element sf { empty }
   | element sfp { empty }
   | element sfpp { empty }
   | element fp { empty }
   | element rf { empty }
   | element rfz { empty }
   | element sfz { empty }
   | element sffz { empty }
   | element fz { empty }
   | element other-dynamics { xsd:string })*,
  print-style-alignAttributes,
  placementAttributes,
  text-decorationAttributes,
  enclosureAttributes

## The empty-placement type represents an empty element with print-style and placement attributes.
empty-placementDefinition = print-styleAttributes, placementAttributes

## The empty-print-style type represents an empty element with print-style attribute group.
empty-print-styleDefinition = print-styleAttributes

## The empty-print-style-align type represents an empty element with print-style-align attribute group.
empty-print-style-alignDefinition = print-style-alignAttributes

## The empty-print-style-align-object type represents an empty element with print-object and print-style-align attribute groups.
empty-print-object-style-alignDefinition =
  print-objectAttributes, print-style-alignAttributes

## The empty-trill-sound type represents an empty element with print-style, placement, and trill-sound attributes.
empty-trill-soundDefinition =
  print-styleAttributes, placementAttributes, trill-soundAttributes

## The horizontal-turn type represents turn elements that are horizontal rather than vertical. These are empty elements with print-style, placement, trill-sound, and slash attributes. If the slash attribute is yes, then a vertical line is used to slash the turn; it is no by default.
horizontal-turnDefinition =
  print-styleAttributes,
  placementAttributes,
  trill-soundAttributes,
  attribute slash { yes-noValues }?

## The fermata text content represents the shape of the fermata sign. An empty fermata element represents a normal fermata. The fermata type is upright if not specified.
fermataDefinition =
  fermata-shapeValues,
  attribute type { upright-invertedValues }?,
  print-styleAttributes

## Fingering is typically indicated 1,2,3,4,5. Multiple fingerings may be given, typically to substitute fingerings in the middle of a note. The substitution and alternate values are "no" if the attribute is not present. For guitar and other fretted instruments, the fingering element represents the fretting finger; the pluck element represents the plucking finger.
fingeringDefinition =
  xsd:string,
  attribute substitution { yes-noValues }?,
  attribute alternate { yes-noValues }?,
  print-styleAttributes,
  placementAttributes

## The formatted-text type represents a text element with text-formatting attributes.
formatted-textDefinition = xsd:string, text-formattingAttributes

## The fret element is used with tablature notation and chord diagrams. Fret numbers start with 0 for an open string and 1 for the first fret.
fretDefinition = xsd:nonNegativeInteger, fontAttributes, colorAttributes

## The level type is used to specify editorial information for different MusicXML elements. If the reference attribute for the level element is yes, this indicates editorial information that is for display only and should not affect playback. For instance, a modern edition of older music may set reference="yes" on the attributes containing the music's original clef, key, and time signature. It is no by default.
levelDefinition =
  xsd:string,
  attribute reference { yes-noValues }?,
  level-displayAttributes

## The midi-device type corresponds to the DeviceName meta event in Standard MIDI Files. The optional port attribute is a number from 1 to 16 that can be used with the unofficial MIDI port (or cable) meta event. Unlike the DeviceName meta event, there can be multiple midi-device elements per MusicXML part starting in MusicXML 3.0. The optional id attribute refers to the score-instrument assigned to this device. If missing, the device assignment affects all score-instrument elements in the score-part.
midi-deviceDefinition =
  xsd:string,
  attribute port { midi-16Values }?,
  attribute id { xsd:IDREF }?

## The midi-instrument type defines MIDI 1.0 instrument playback. The midi-instrument element can be a part of either the score-instrument element at the start of a part, or the sound element within a part. The id attribute refers to the score-instrument affected by the change.
midi-instrumentDefinition =
  element midi-channel {
    midi-16Values
    >> a:documentation [
         "The midi-channel element specifies a MIDI 1.0 channel numbers ranging from 1 to 16."
       ]
  }?,
  element midi-name {
    xsd:string
    >> a:documentation [
         "The midi-name element corresponds to a ProgramName meta-event within a Standard MIDI File."
       ]
  }?,
  element midi-bank {
    midi-16384Values
    >> a:documentation [
         "The midi-bank element specified a MIDI 1.0 bank number ranging from 1 to 16,384."
       ]
  }?,
  element midi-program {
    midi-128Values
    >> a:documentation [
         "The midi-program element specifies a MIDI 1.0 program number ranging from 1 to 128."
       ]
  }?,
  element midi-unpitched {
    midi-128Values
    >> a:documentation [
         "For unpitched instruments, the midi-unpitched element specifies a MIDI 1.0 note number ranging from 1 to 128. It is usually used with MIDI banks for percussion. Note that MIDI 1.0 note numbers are generally specified from 0 to 127 rather than the 1 to 128 numbering used in this element."
       ]
  }?,
  element volume {
    percentValues
    >> a:documentation [
         "The volume element value is a percentage of the maximum ranging from 0 to 100, with decimal values allowed. This corresponds to a scaling value for the MIDI 1.0 channel volume controller."
       ]
  }?,
  element pan {
    rotation-degreesValues
    >> a:documentation [
         "The pan and elevation elements allow placing of sound in a 3-D space relative to the listener. Both are expressed in degrees ranging from -180 to 180. For pan, 0 is straight ahead, -90 is hard left, 90 is hard right, and -180 and 180 are directly behind the listener."
       ]
  }?,
  element elevation {
    rotation-degreesValues
    >> a:documentation [
         "The elevation and pan elements allow placing of sound in a 3-D space relative to the listener. Both are expressed in degrees ranging from -180 to 180. For elevation, 0 is level with the listener, 90 is directly above, and -90 is directly below."
       ]
  }?,
  attribute id { xsd:IDREF }

## The name-display type is used for exact formatting of multi-font text in part and group names to the left of the system. The print-object attribute can be used to determine what, if anything, is printed at the start of each system. Enclosure for the display-text element is none by default. Language for the display-text element is Italian ("it") by default.
name-displayDefinition =
  (element display-text { formatted-textDefinition }
   | element accidental-text { accidental-textDefinition })*,
  print-objectAttributes

## The other-play element represents other types of playback. The required type attribute indicates the type of playback to which the element content applies.
other-playDefinition =
  xsd:string,
  attribute type { xsd:token }

## The play type, new in Version 3.0, specifies playback techniques to be used in conjunction with the instrument-sound element. When used as part of a sound element, it applies to all notes going forward in score order. In multi-instrument parts, the affected instrument should be specified using the id attribute. When used as part of a note element, it applies to the current note only.
playDefinition =
  (element ipa {
     xsd:string
     >> a:documentation [
          "The ipa element represents International Phonetic Alphabet (IPA) sounds for vocal music. String content is limited to IPA 2005 symbols represented in Unicode 6.0."
        ]
   }
   | element mute { muteValues }
   | element semi-pitched { semi-pitchedValues }
   | element other-play { other-playDefinition })*,
  attribute id { xsd:IDREF }?

## The string type is used with tablature notation, regular notation (where it is often circled), and chord diagrams. String numbers start with 1 for the highest string.
stringDefinition =
  string-numberValues, print-styleAttributes, placementAttributes

## The typed-text type represents a text element with a type attributes.
typed-textDefinition =
  xsd:string,
  attribute type { xsd:token }?

## Wavy lines are one way to indicate trills. When used with a measure element, they should always have type="continue" set.
wavy-lineDefinition =
  attribute type { start-stop-continueValues },
  attribute number { number-levelValues }?,
  positionAttributes,
  placementAttributes,
  colorAttributes,
  trill-soundAttributes

## The attributes element contains musical information that typically changes on measure boundaries. This includes key and time signatures, clefs, transpositions, and staving. When attributes are changed mid-measure, it affects the music in score order, not in MusicXML document order.
attributesDefinition =
  editorialGroup,
  element divisions {
    positive-divisionsValues
    >> a:documentation [
         "Musical notation duration is commonly represented as fractions. The divisions element indicates how many divisions per quarter note are used to indicate a note's duration. For example, if duration = 1 and divisions = 2, this is an eighth note duration. Duration and divisions are used directly for generating sound output, so they must be chosen to take tuplets into account. Using a divisions element lets us use just one number to represent a duration for each note in the score, while retaining the full power of a fractional representation. If maximum compatibility with Standard MIDI 1.0 files is important, do not have the divisions value exceed 16383."
       ]
  }?,
  element key {
    keyDefinition
    >> a:documentation [
         "The key element represents a key signature. Both traditional and non-traditional key signatures are supported. The optional number attribute refers to staff numbers. If absent, the key signature applies to all staves in the part."
       ]
  }*,
  element time {
    timeDefinition
    >> a:documentation [
         "Time signatures are represented by the beats element for the numerator and the beat-type element for the denominator."
       ]
  }*,
  element staves {
    xsd:nonNegativeInteger
    >> a:documentation [
         "The staves element is used if there is more than one staff represented in the given part (e.g., 2 staves for typical piano parts). If absent, a value of 1 is assumed. Staves are ordered from top to bottom in a part in numerical order, with staff 1 above staff 2."
       ]
  }?,
  element part-symbol {
    part-symbolDefinition
    >> a:documentation [
         "The part-symbol element indicates how a symbol for a multi-staff part is indicated in the score."
       ]
  }?,
  element instruments {
    xsd:nonNegativeInteger
    >> a:documentation [
         "The instruments element is only used if more than one instrument is represented in the part (e.g., oboe I and II where they play together most of the time). If absent, a value of 1 is assumed."
       ]
  }?,
  element clef {
    clefDefinition
    >> a:documentation [
         "Clefs are represented by a combination of sign, line, and clef-octave-change elements."
       ]
  }*,
  element staff-details {
    staff-detailsDefinition
    >> a:documentation [
         "The staff-details element is used to indicate different types of staves."
       ]
  }*,
  element transpose {
    transposeDefinition
    >> a:documentation [
         "If the part is being encoded for a transposing instrument in written vs. concert pitch, the transposition must be encoded in the transpose element using the transpose type."
       ]
  }*,
  
  ## Directives are like directions, but can be grouped together with attributes for convenience. This is typically used for tempo markings at the beginning of a piece of music. This element has been deprecated in Version 2.0 in favor of the directive attribute for direction elements. Language names come from ISO 639, with optional country subcodes from ISO 3166.
  element directive {
    xsd:string, print-styleAttributes, xml.lang.attrib?
  }*,
  element measure-style {
    measure-styleDefinition
    >> a:documentation [
         "A measure-style indicates a special way to print partial to multiple measures within a part. This includes multiple rests over several measures, repeats of beats, single, or multiple measures, and use of slash notation."
       ]
  }*

## The beat-repeat type is used to indicate that a single beat (but possibly many notes) is repeated. Both the start and stop of the beat being repeated should be specified. The slashes attribute specifies the number of slashes to use in the symbol. The use-dots attribute indicates whether or not to use dots as well (for instance, with mixed rhythm patterns). By default, the value for slashes is 1 and the value for use-dots is no.
##	
## The beat-repeat element specifies a notation style for repetitions. The actual music being repeated needs to be repeated within the MusicXML file. This element specifies the notation that indicates the repeat.
beat-repeatDefinition =
  slashGroup?,
  attribute type { start-stopValues },
  attribute slashes { xsd:positiveInteger }?,
  attribute use-dots { yes-noValues }?

## A cancel element indicates that the old key signature should be cancelled before the new one appears. This will always happen when changing to C major or A minor and need not be specified then. The cancel value matches the fifths value of the cancelled key signature (e.g., a cancel of -2 will provide an explicit cancellation for changing from B flat major to F major). The optional location attribute indicates whether the cancellation appears relative to the new key signature.
cancelDefinition =
  fifthsValues,
  attribute location { cancel-locationValues }?

## Clefs are represented by a combination of sign, line, and clef-octave-change elements. The optional number attribute refers to staff numbers within the part. A value of 1 is assumed if not present.
## 
## Sometimes clefs are added to the staff in non-standard line positions, either to indicate cue passages, or when there are multiple clefs present simultaneously on one staff. In this situation, the additional attribute is set to "yes" and the line value is ignored. The size attribute is used for clefs where the additional attribute is "yes". It is typically used to indicate cue clefs.
## 
## Sometimes clefs at the start of a measure need to appear after the barline rather than before, as for cues or for use after a repeated section. The after-barline attribute is set to "yes" in this situation. The attribute is ignored for mid-measure clefs.
## 
## Clefs appear at the start of each system unless the print-object attribute has been set to "no" or the additional attribute has been set to "yes".
clefDefinition =
  element sign {
    clef-signValues
    >> a:documentation [
         "The sign element represents the clef symbol."
       ]
  },
  element line {
    staff-lineValues
    >> a:documentation [
         "Line numbers are counted from the bottom of the staff. Standard values are 2 for the G sign (treble clef), 4 for the F sign (bass clef), 3 for the C sign (alto clef) and 5 for TAB (on a 6-line staff)."
       ]
  }?,
  element clef-octave-change {
    xsd:integer
    >> a:documentation [
         "The clef-octave-change element is used for transposing clefs. A treble clef for tenors would have a value of -1."
       ]
  }?,
  attribute number { staff-numberValues }?,
  attribute additional { yes-noValues }?,
  attribute size { symbol-sizeValues }?,
  attribute after-barline { yes-noValues }?,
  print-styleAttributes,
  print-objectAttributes

## The interchangeable type is used to represent the second in a pair of interchangeable dual time signatures, such as the 6/8 in 3/4 (6/8). A separate symbol attribute value is available compared to the time element's symbol attribute, which applies to the first of the dual time signatures. The parentheses attribute value is yes by default.
interchangeableDefinition =
  element time-relation { time-relationValues }?,
  time-signatureGroup+,
  attribute symbol { time-symbolValues }?,
  attribute separator { time-separatorValues }?

## The key type represents a key signature. Both traditional and non-traditional key signatures are supported. The optional number attribute refers to staff numbers. If absent, the key signature applies to all staves in the part. Key signatures appear at the start of each system unless the print-object attribute has been set to "no".
keyDefinition =
  (traditional-keyGroup | non-traditional-keyGroup*),
  element key-octave {
    key-octaveDefinition
    >> a:documentation [
         "The optional list of key-octave elements is used to specify in which octave each element of the key signature appears."
       ]
  }*,
  attribute number { staff-numberValues }?,
  print-styleAttributes,
  print-objectAttributes

## The key-octave element specifies in which octave an element of a key signature appears. The content specifies the octave value using the same values as the display-octave element. The number attribute is a positive integer that refers to the key signature element in left-to-right order. If the cancel attribute is set to yes, then this number refers to an element specified by the cancel element. It is no by default.
key-octaveDefinition =
  octaveValues,
  attribute number { xsd:positiveInteger },
  attribute cancel { yes-noValues }?

## The measure-repeat type is used for both single and multiple measure repeats. The text of the element indicates the number of measures to be repeated in a single pattern. The slashes attribute specifies the number of slashes to use in the repeat sign. It is 1 if not specified. Both the start and the stop of the measure-repeat must be specified. The text of the element is ignored when the type is stop.
##	
## The measure-repeat element specifies a notation style for repetitions. The actual music being repeated needs to be repeated within the MusicXML file. This element specifies the notation that indicates the repeat.
measure-repeatDefinition =
  positive-integer-or-emptyValues,
  attribute type { start-stopValues },
  attribute slashes { xsd:positiveInteger }?

## A measure-style indicates a special way to print partial to multiple measures within a part. This includes multiple rests over several measures, repeats of beats, single, or multiple measures, and use of slash notation.
## 
## The multiple-rest and measure-repeat symbols indicate the number of measures covered in the element content. The beat-repeat and slash elements can cover partial measures. All but the multiple-rest element use a type attribute to indicate starting and stopping the use of the style. The optional number attribute specifies the staff number from top to bottom on the system, as with clef.
measure-styleDefinition =
  (element multiple-rest { multiple-restDefinition }
   | element measure-repeat { measure-repeatDefinition }
   | element beat-repeat { beat-repeatDefinition }
   | element slash { slashDefinition }),
  attribute number { staff-numberValues }?,
  fontAttributes,
  colorAttributes

## The text of the multiple-rest type indicates the number of measures in the multiple rest. Multiple rests may use the 1-bar / 2-bar / 4-bar rest symbols, or a single shape. The use-symbols attribute indicates which to use; it is no if not specified. The element text is ignored when the type is stop.
multiple-restDefinition =
  positive-integer-or-emptyValues,
  attribute use-symbols { yes-noValues }?

## The part-symbol type indicates how a symbol for a multi-staff part is indicated in the score; brace is the default value. The top-staff and bottom-staff elements are used when the brace does not extend across the entire part. For example, in a 3-staff organ part, the top-staff will typically be 1 for the right hand, while the bottom-staff will typically be 2 for the left hand. Staff 3 for the pedals is usually outside the brace.
part-symbolDefinition =
  group-symbol-valueValues,
  attribute top-staff { staff-numberValues }?,
  attribute bottom-staff { staff-numberValues }?,
  positionAttributes,
  colorAttributes

## The slash type is used to indicate that slash notation is to be used. If the slash is on every beat, use-stems is no (the default). To indicate rhythms but not pitches, use-stems is set to yes. The type attribute indicates whether this is the start or stop of a slash notation style. The use-dots attribute works as for the beat-repeat element, and only has effect if use-stems is no.
slashDefinition =
  slashGroup?,
  attribute type { start-stopValues },
  attribute use-dots { yes-noValues }?,
  attribute use-stems { yes-noValues }?

## The staff-details element is used to indicate different types of staves. The optional number attribute specifies the staff number from top to bottom on the system, as with clef. The print-object attribute is used to indicate when a staff is not printed in a part, usually in large scores where empty parts are omitted. It is yes by default. If print-spacing is yes while print-object is no, the score is printed in cutaway format where vertical space is left for the empty part.
staff-detailsDefinition =
  element staff-type { staff-typeValues }?,
  element staff-lines {
    xsd:nonNegativeInteger
    >> a:documentation [
         "The staff-lines element specifies the number of lines for a non 5-line staff."
       ]
  }?,
  element staff-tuning { staff-tuningDefinition }*,
  element capo {
    xsd:nonNegativeInteger
    >> a:documentation [
         "The capo element indicates at which fret a capo should be placed on a fretted instrument. This changes the open tuning of the strings specified by staff-tuning by the specified number of half-steps."
       ]
  }?,
  element staff-size {
    non-negative-decimalValues
    >> a:documentation [
         "The staff-size element indicates how large a staff space is on this staff, expressed as a percentage of the work's default scaling. Values less than 100 make the staff space smaller while values over 100 make the staff space larger. A staff-type of cue, ossia, or editorial implies a staff-size of less than 100, but the exact value is implementation-dependent unless specified here. Staff size affects staff height only, not the relationship of the staff to the left and right margins."
       ]
  }?,
  attribute number { staff-numberValues }?,
  attribute show-frets { show-fretsValues }?,
  print-objectAttributes,
  print-spacingAttributes

## The staff-tuning type specifies the open, non-capo tuning of the lines on a tablature staff.
staff-tuningDefinition =
  tuningGroup,
  attribute line { staff-lineValues }?

## Time signatures are represented by the beats element for the numerator and the beat-type element for the denominator. The symbol attribute is used indicate common and cut time symbols as well as a single number display. Multiple pairs of beat and beat-type elements are used for composite time signatures with multiple denominators, such as 2/4 + 3/8. A composite such as 3+2/8 requires only one beat/beat-type pair.
## 
## The print-object attribute allows a time signature to be specified but not printed, as is the case for excerpts from the middle of a score. The value is "yes" if not present. The optional number attribute refers to staff numbers within the part. If absent, the time signature applies to all staves in the part.
timeDefinition =
  ((time-signatureGroup+,
    element interchangeable { interchangeableDefinition }?)
   | element senza-misura {
       xsd:string
       >> a:documentation [
            "A senza-misura element explicitly indicates that no time signature is present. The optional element content indicates the symbol to be used, if any, such as an X. The time element's symbol attribute is not used when a senza-misura element is present."
          ]
     }),
  attribute number { staff-numberValues }?,
  attribute symbol { time-symbolValues }?,
  attribute separator { time-separatorValues }?,
  print-style-alignAttributes,
  print-objectAttributes

## The transpose type represents what must be added to a written pitch to get a correct sounding pitch. The optional number attribute refers to staff numbers, from top to bottom on the system. If absent, the transposition applies to all staves in the part. Per-staff transposition is most often used in parts that represent multiple instruments.
transposeDefinition =
  element diatonic {
    xsd:integer
    >> a:documentation [
         "The diatonic element specifies the number of pitch steps needed to go from written to sounding pitch. This allows for correct spelling of enharmonic transpositions."
       ]
  }?,
  element chromatic {
    semitonesValues
    >> a:documentation [
         "The chromatic element represents the number of semitones needed to get from written to sounding pitch. This value does not include octave-change values; the values for both elements need to be added to the written pitch to get the correct sounding pitch."
       ]
  },
  element octave-change {
    xsd:integer
    >> a:documentation [
         "The octave-change element indicates how many octaves to add to get from written pitch to sounding pitch."
       ]
  }?,
  element double { empty }?,
  attribute number { staff-numberValues }?

## The bar-style-color type contains barline style and color information.
bar-style-colorDefinition = bar-styleValues, colorAttributes

## If a barline is other than a normal single barline, it should be represented by a barline type that describes it. This includes information about repeats and multiple endings, as well as line style. Barline data is on the same level as the other musical data in a score - a child of a measure in a partwise score, or a part in a timewise score. This allows for barlines within measures, as in dotted barlines that subdivide measures in complex meters. The two fermata elements allow for fermatas on both sides of the barline (the lower one inverted).
##	
## Barlines have a location attribute to make it easier to process barlines independently of the other musical data in a score. It is often easier to set up measures separately from entering notes. The location attribute must match where the barline element occurs within the rest of the musical data in the score. If location is left, it should be the first element in the measure, aside from the print, bookmark, and link elements. If location is right, it should be the last element, again with the possible exception of the print, bookmark, and link elements. If no location is specified, the right barline is the default. The segno, coda, and divisions attributes work the same way as in the sound element. They are used for playback when barline elements contain segno or coda child elements.
barlineDefinition =
  element bar-style { bar-style-colorDefinition }?,
  editorialGroup,
  element wavy-line { wavy-lineDefinition }?,
  element segno { empty-print-style-alignDefinition }?,
  element coda { empty-print-style-alignDefinition }?,
  element fermata { fermataDefinition }?,
  element fermata { fermataDefinition }?,
  element ending { endingDefinition }?,
  element repeat { repeatDefinition }?,
  attribute location { right-left-middleValues }?,
  attribute segno { xsd:token }?,
  attribute coda { xsd:token }?,
  attribute divisions { divisionsValues }?

## The ending type represents multiple (e.g. first and second) endings. Typically, the start type is associated with the left barline of the first measure in an ending. The stop and discontinue types are associated with the right barline of the last measure in an ending. Stop is used when the ending mark concludes with a downward jog, as is typical for first endings. Discontinue is used when there is no downward jog, as is typical for second endings that do not conclude a piece. The length of the jog can be specified using the end-length attribute. The text-x and text-y attributes are offsets that specify where the baseline of the start of the ending text appears, relative to the start of the ending line.
##	
## The number attribute reflects the numeric values of what is under the ending line. Single endings such as "1" or comma-separated multiple endings such as "1,2" may be used. The ending element text is used when the text displayed in the ending is different than what appears in the number attribute. The print-object element is used to indicate when an ending is present but not printed, as is often the case for many parts in a full score.
endingDefinition =
  xsd:string,
  attribute number { ending-numberValues },
  attribute type { start-stop-discontinueValues },
  print-objectAttributes,
  print-styleAttributes,
  attribute end-length { tenthsValues }?,
  attribute text-x { tenthsValues }?,
  attribute text-y { tenthsValues }?

## The repeat type represents repeat marks. The start of the repeat has a forward direction while the end of the repeat has a backward direction. Backward repeats that are not part of an ending can use the times attribute to indicate the number of times the repeated section is played.
repeatDefinition =
  attribute direction { backward-forwardValues },
  attribute times { xsd:nonNegativeInteger }?,
  attribute winged { wingedValues }?

## The accord type represents the tuning of a single string in the scordatura element. It uses the same group of elements as the staff-tuning element. Strings are numbered from high to low.
accordDefinition =
  tuningGroup,
  attribute string { string-numberValues }?

## The accordion-registration type is use for accordion registration symbols. These are circular symbols divided horizontally into high, middle, and low sections that correspond to 4', 8', and 16' pipes. Each accordion-high, accordion-middle, and accordion-low element represents the presence of one or more dots in the registration diagram. An accordion-registration element needs to have at least one of the child elements present.
accordion-registrationDefinition =
  element accordion-high { empty }?,
  element accordion-middle {
    accordion-middleValues
    >> a:documentation [
         "The accordion-middle element indicates the presence of 1 to 3 dots in the middle (8') section of the registration symbol."
       ]
  }?,
  element accordion-low { empty }?,
  print-style-alignAttributes

## The barre element indicates placing a finger over multiple strings on a single fret. The type is "start" for the lowest pitched string (e.g., the string with the highest MusicXML number) and is "stop" for the highest pitched string.
barreDefinition =
  attribute type { start-stopValues },
  colorAttributes

## The bass type is used to indicate a bass note in popular music chord symbols, e.g. G/C. It is generally not used in functional harmony, as inversion is generally not used in pop chord symbols. As with root, it is divided into step and alter elements, similar to pitches.
bassDefinition =
  element bass-step { bass-stepDefinition },
  element bass-alter { bass-alterDefinition }?

## The bass-alter type represents the chromatic alteration of the bass of the current chord within the harmony element. In some chord styles, the text for the bass-step element may include bass-alter information. In that case, the print-object attribute of the bass-alter element can be set to no. The location attribute indicates whether the alteration should appear to the left or the right of the bass-step; it is right by default.
bass-alterDefinition =
  semitonesValues,
  print-objectAttributes,
  print-styleAttributes,
  attribute location { left-rightValues }?

## The bass-step type represents the pitch step of the bass of the current chord within the harmony element. The text attribute indicates how the bass should appear in a score if not using the element contents.
bass-stepDefinition =
  stepValues,
  attribute text { xsd:token }?,
  print-styleAttributes

## The beater type represents pictograms for beaters, mallets, and sticks that do not have different materials represented in the pictogram.
beaterDefinition =
  beater-valueValues,
  attribute tip { tip-directionValues }?

## Brackets are combined with words in a variety of modern directions. The line-end attribute specifies if there is a jog up or down (or both), an arrow, or nothing at the start or end of the bracket. If the line-end is up or down, the length of the jog can be specified using the end-length attribute. The line-type is solid by default.
bracketDefinition =
  attribute type { start-stop-continueValues },
  attribute number { number-levelValues }?,
  attribute line-end { line-endValues },
  attribute end-length { tenthsValues }?,
  line-typeAttributes,
  dashed-formattingAttributes,
  positionAttributes,
  colorAttributes

## The dashes type represents dashes, used for instance with cresc. and dim. marks.
dashesDefinition =
  attribute type { start-stop-continueValues },
  attribute number { number-levelValues }?,
  dashed-formattingAttributes,
  positionAttributes,
  colorAttributes

## The degree type is used to add, alter, or subtract individual notes in the chord. The print-object attribute can be used to keep the degree from printing separately when it has already taken into account in the text attribute of the kind element. The degree-value and degree-type text attributes specify how the value and type of the degree should be displayed.
##	
## A harmony of kind "other" can be spelled explicitly by using a series of degree elements together with a root.
degreeDefinition =
  element degree-value { degree-valueDefinition },
  element degree-alter { degree-alterDefinition },
  element degree-type { degree-typeDefinition },
  print-objectAttributes

## The degree-alter type represents the chromatic alteration for the current degree. If the degree-type value is alter or subtract, the degree-alter value is relative to the degree already in the chord based on its kind element. If the degree-type value is add, the degree-alter is relative to a dominant chord (major and perfect intervals except for a minor seventh). The plus-minus attribute is used to indicate if plus and minus symbols should be used instead of sharp and flat symbols to display the degree alteration; it is no by default.
degree-alterDefinition =
  semitonesValues,
  print-styleAttributes,
  attribute plus-minus { yes-noValues }?

## The degree-type type indicates if this degree is an addition, alteration, or subtraction relative to the kind of the current chord. The value of the degree-type element affects the interpretation of the value of the degree-alter element. The text attribute specifies how the type of the degree should be displayed in a score.
degree-typeDefinition =
  degree-type-valueValues,
  attribute text { xsd:token }?,
  print-styleAttributes

## The content of the degree-value type is a number indicating the degree of the chord (1 for the root, 3 for third, etc). The text attribute specifies how the type of the degree should be displayed in a score. The degree-value symbol attribute indicates that a symbol should be used in specifying the degree. If the symbol attribute is present, the value of the text attribute follows the symbol.
degree-valueDefinition =
  xsd:positiveInteger,
  attribute symbol { degree-symbol-valueValues }?,
  attribute text { xsd:token }?,
  print-styleAttributes

## A direction is a musical indication that is not attached to a specific note. Two or more may be combined to indicate starts and stops of wedges, dashes, etc.
##	
## By default, a series of direction-type elements and a series of child elements of a direction-type within a single direction element follow one another in sequence visually. For a series of direction-type children, non-positional formatting attributes are carried over from the previous element by default.
directionDefinition =
  element direction-type { direction-typeDefinition }+,
  element offset { offsetDefinition }?,
  editorial-voice-directionGroup,
  staffGroup?,
  element sound { soundDefinition }?,
  placementAttributes,
  directiveAttributes

## Textual direction types may have more than 1 component due to multiple fonts. The dynamics element may also be used in the notations element. Attribute groups related to print suggestions apply to the individual direction-type, not to the overall direction.
direction-typeDefinition =
  element rehearsal {
    formatted-textDefinition
    >> a:documentation [
         'The rehearsal type specifies a rehearsal mark. Language is Italian ("it") by default. Enclosure is square by default. Left justification is assumed if not specified.'
       ]
  }+
  | element segno {
      empty-print-style-alignDefinition
      >> a:documentation [
           "The segno element is the visual indicator of a segno sign. A sound element is needed to guide playback applications reliably."
         ]
    }+
  | element words {
      formatted-textDefinition
      >> a:documentation [
           'The words element specifies a standard text direction. Left justification is assumed if not specified. Language is Italian ("it") by default. Enclosure is none by default.'
         ]
    }+
  | element coda {
      empty-print-style-alignDefinition
      >> a:documentation [
           "The coda element is the visual indicator of a coda sign. A sound element is needed to guide playback applications reliably."
         ]
    }+
  | element wedge { wedgeDefinition }
  | element dynamics { dynamicsDefinition }+
  | element dashes { dashesDefinition }
  | element bracket { bracketDefinition }
  | element pedal { pedalDefinition }
  | element metronome { metronomeDefinition }
  | element octave-shift { octave-shiftDefinition }
  | element harp-pedals { harp-pedalsDefinition }
  | element damp {
      empty-print-style-alignDefinition
      >> a:documentation [
           "The damp element specifies a harp damping mark."
         ]
    }
  | element damp-all {
      empty-print-style-alignDefinition
      >> a:documentation [
           "The damp-all element specifies a harp damping mark for all strings."
         ]
    }
  | element eyeglasses {
      empty-print-style-alignDefinition
      >> a:documentation [
           "The eyeglasses element specifies the eyeglasses symbol, common in commercial music."
         ]
    }
  | element string-mute { string-muteDefinition }
  | element scordatura { scordaturaDefinition }
  | element image { imageDefinition }
  | element principal-voice { principal-voiceDefinition }
  | element accordion-registration { accordion-registrationDefinition }
  | element percussion { percussionDefinition }+
  | element other-direction { other-directionDefinition }

## The feature type is a part of the grouping element used for musical analysis. The type attribute represents the type of the feature and the element content represents its value. This type is flexible to allow for different analyses.
featureDefinition =
  xsd:string,
  attribute type { xsd:token }?

## The first-fret type indicates which fret is shown in the top space of the frame; it is fret 1 if the element is not present. The optional text attribute indicates how this is represented in the fret diagram, while the location attribute indicates whether the text appears to the left or right of the frame.
first-fretDefinition =
  xsd:positiveInteger,
  attribute text { xsd:token }?,
  attribute location { left-rightValues }?

## The frame type represents a frame or fretboard diagram used together with a chord symbol. The representation is based on the NIFF guitar grid with additional information. The frame type's unplayed attribute indicates what to display above a string that has no associated frame-note element. Typical values are x and the empty string. If the attribute is not present, the display of the unplayed string is application-defined.
frameDefinition =
  element frame-strings {
    xsd:positiveInteger
    >> a:documentation [
         "The frame-strings element gives the overall size of the frame in vertical lines (strings)."
       ]
  },
  element frame-frets {
    xsd:positiveInteger
    >> a:documentation [
         "The frame-frets element gives the overall size of the frame in horizontal spaces (frets)."
       ]
  },
  element first-fret { first-fretDefinition }?,
  element frame-note { frame-noteDefinition }+,
  positionAttributes,
  colorAttributes,
  halignAttributes,
  valign-imageAttributes,
  attribute height { tenthsValues }?,
  attribute width { tenthsValues }?,
  attribute unplayed { xsd:token }?

## The frame-note type represents each note included in the frame. An open string will have a fret value of 0, while a muted string will not be associated with a frame-note element.
frame-noteDefinition =
  element string { stringDefinition },
  element fret { fretDefinition },
  element fingering { fingeringDefinition }?,
  element barre { barreDefinition }?

## The grouping type is used for musical analysis. When the type attribute is "start" or "single", it usually contains one or more feature elements. The number attribute is used for distinguishing between overlapping and hierarchical groupings. The member-of attribute allows for easy distinguishing of what grouping elements are in what hierarchy. Feature elements contained within a "stop" type of grouping may be ignored.
##	
## This element is flexible to allow for different types of analyses. Future versions of the MusicXML format may add elements that can represent more standardized categories of analysis data, allowing for easier data sharing.
groupingDefinition =
  element feature { featureDefinition }*,
  attribute type { start-stop-singleValues },
  attribute number { xsd:token }?,
  attribute member-of { xsd:token }?

## The harmony type is based on Humdrum's **harm encoding, extended to support chord symbols in popular music as well as functional harmony analysis in classical music.
##	
## If there are alternate harmonies possible, this can be specified using multiple harmony elements differentiated by type. Explicit harmonies have all note present in the music; implied have some notes missing but implied; alternate represents alternate analyses. 
##	
## The harmony object may be used for analysis or for chord symbols. The print-object attribute controls whether or not anything is printed due to the harmony element. The print-frame attribute controls printing of a frame or fretboard diagram. The print-style attribute group sets the default for the harmony, but individual elements can override this with their own print-style values.
harmonyDefinition =
  harmony-chordGroup+,
  element frame { frameDefinition }?,
  element offset { offsetDefinition }?,
  editorialGroup,
  staffGroup?,
  attribute type { harmony-typeValues }?,
  print-objectAttributes,
  attribute print-frame { yes-noValues }?,
  print-styleAttributes,
  placementAttributes

## The harp-pedals type is used to create harp pedal diagrams. The pedal-step and pedal-alter elements use the same values as the step and alter elements. For easiest reading, the pedal-tuning elements should follow standard harp pedal order, with pedal-step values of D, C, B, E, F, G, and A.
harp-pedalsDefinition =
  element pedal-tuning { pedal-tuningDefinition }+,
  print-style-alignAttributes

## The image type is used to include graphical images in a score.
imageDefinition = image-attributesAttributes

## The inversion type represents harmony inversions. The value is a number indicating which inversion is used: 0 for root position, 1 for first inversion, etc.
inversionDefinition = xsd:nonNegativeInteger, print-styleAttributes

## Kind indicates the type of chord. Degree elements can then add, subtract, or alter from these starting points
##	
## The attributes are used to indicate the formatting of the symbol. Since the kind element is the constant in all the harmony-chord groups that can make up a polychord, many formatting attributes are here.
##	
## The use-symbols attribute is yes if the kind should be represented when possible with harmony symbols rather than letters and numbers. These symbols include:
##	
##	major: a triangle, like Unicode 25B3
##	minor: -, like Unicode 002D
##	augmented: +, like Unicode 002B
##	diminished: °, like Unicode 00B0
##	half-diminished: ø, like Unicode 00F8
##	
## For the major-minor kind, only the minor symbol is used when use-symbols is yes. The major symbol is set using the symbol attribute in the degree-value element. The corresponding degree-alter value will usually be 0 in this case.
## 
## The text attribute describes how the kind should be spelled in a score. If use-symbols is yes, the value of the text attribute follows the symbol. The stack-degrees attribute is yes if the degree elements should be stacked above each other. The parentheses-degrees attribute is yes if all the degrees should be in parentheses. The bracket-degrees attribute is yes if all the degrees should be in a bracket. If not specified, these values are implementation-specific. The alignment attributes are for the entire harmony-chord group of which this kind element is a part.
kindDefinition =
  kind-valueValues,
  attribute use-symbols { yes-noValues }?,
  attribute text { xsd:token }?,
  attribute stack-degrees { yes-noValues }?,
  attribute parentheses-degrees { yes-noValues }?,
  attribute bracket-degrees { yes-noValues }?,
  print-styleAttributes,
  halignAttributes,
  valignAttributes

## The measure-numbering type describes how frequently measure numbers are displayed on this part. The number attribute from the measure element is used for printing. Measures with an implicit attribute set to "yes" never display a measure number, regardless of the measure-numbering setting.
measure-numberingDefinition =
  measure-numbering-valueValues, print-style-alignAttributes

## The metronome type represents metronome marks and other metric relationships. The beat-unit group and per-minute element specify regular metronome marks. The metronome-note and metronome-relation elements allow for the specification of more complicated metric relationships, such as swing tempo marks where two eighths are equated to a quarter note / eighth note triplet. The parentheses attribute indicates whether or not to put the metronome mark in parentheses; its value is no if not specified.
metronomeDefinition =
  ((beat-unitGroup,
    (element per-minute { per-minuteDefinition }
     | beat-unitGroup))
   | (element metronome-note { metronome-noteDefinition }+,
      (element metronome-relation {
         xsd:string
         >> a:documentation [
              "The metronome-relation element describes the relationship symbol that goes between the two sets of metronome-note elements. The currently allowed value is equals, but this may expand in future versions. If the element is empty, the equals value is used."
            ]
       },
       element metronome-note { metronome-noteDefinition }+)?)),
  print-style-alignAttributes,
  justifyAttributes,
  attribute parentheses { yes-noValues }?

## The metronome-beam type works like the beam type in defining metric relationships, but does not include all the attributes available in the beam type.
metronome-beamDefinition =
  beam-valueValues,
  attribute number { beam-levelValues }?

## The metronome-note type defines the appearance of a note within a metric relationship mark.
metronome-noteDefinition =
  element metronome-type {
    note-type-valueValues
    >> a:documentation [
         "The metronome-type element works like the type element in defining metric relationships."
       ]
  },
  element metronome-dot { empty }*,
  element metronome-beam { metronome-beamDefinition }*,
  element metronome-tuplet { metronome-tupletDefinition }?

## The metronome-tuplet type uses the same element structure as the time-modification element along with some attributes from the tuplet element.
metronome-tupletDefinition =
  time-modificationDefinition,
  attribute type { start-stopValues },
  attribute bracket { yes-noValues }?,
  attribute show-number { show-tupletValues }?

## The octave shift type indicates where notes are shifted up or down from their true pitched values because of printing difficulty. Thus a treble clef line noted with 8va will be indicated with an octave-shift down from the pitch data indicated in the notes. A size of 8 indicates one octave; a size of 15 indicates two octaves.
octave-shiftDefinition =
  attribute type { up-down-stop-continueValues },
  attribute number { number-levelValues }?,
  attribute size { xsd:positiveInteger }?,
  dashed-formattingAttributes,
  print-styleAttributes

## An offset is represented in terms of divisions, and indicates where the direction will appear relative to the current musical location. This affects the visual appearance of the direction. If the sound attribute is "yes", then the offset affects playback too. If the sound attribute is "no", then any sound associated with the direction takes effect at the current location. The sound attribute is "no" by default for compatibility with earlier versions of the MusicXML format. If an element within a direction includes a default-x attribute, the offset value will be ignored when determining the appearance of that element.
offsetDefinition =
  divisionsValues,
  attribute sound { yes-noValues }?

## The other-direction type is used to define any direction symbols not yet in the current version of the MusicXML format. This allows extended representation, though without application interoperability.
other-directionDefinition =
  xsd:string, print-objectAttributes, print-style-alignAttributes

## The pedal type represents piano pedal marks. The line attribute is yes if pedal lines are used. The sign attribute is yes if Ped and * signs are used. For MusicXML 2.0 compatibility, the sign attribute is yes by default if the line attribute is no, and is no by default if the line attribute is yes. The change and continue types are used when the line attribute is yes. The change type indicates a pedal lift and retake indicated with an inverted V marking. The continue type allows more precise formatting across system breaks and for more complex pedaling lines. The alignment attributes are ignored if the line attribute is yes.
pedalDefinition =
  attribute type { start-stop-change-continueValues },
  attribute line { yes-noValues }?,
  attribute sign { yes-noValues }?,
  print-style-alignAttributes

## The pedal-tuning type specifies the tuning of a single harp pedal.
pedal-tuningDefinition =
  element pedal-step {
    stepValues
    >> a:documentation [
         "The pedal-step element defines the pitch step for a single harp pedal."
       ]
  },
  element pedal-alter {
    semitonesValues
    >> a:documentation [
         "The pedal-alter element defines the chromatic alteration for a single harp pedal."
       ]
  }

## The per-minute type can be a number, or a text description including numbers. If a font is specified, it overrides the font specified for the overall metronome element. This allows separate specification of a music font for the beat-unit and a text font for the numeric value, in cases where a single metronome font is not used.
per-minuteDefinition = xsd:string, fontAttributes

## The percussion element is used to define percussion pictogram symbols. Definitions for these symbols can be found in Kurt Stone's "Music Notation in the Twentieth Century" on pages 206-212 and 223. Some values are added to these based on how usage has evolved in the 30 years since Stone's book was published.
percussionDefinition =
  (element glass { glassValues }
   | element metal { metalValues }
   | element wood { woodValues }
   | element pitched { pitchedValues }
   | element membrane { membraneValues }
   | element effect { effectValues }
   | element timpani { empty }
   | element beater { beaterDefinition }
   | element stick { stickDefinition }
   | element stick-location { stick-locationValues }
   | element other-percussion { xsd:string }),
  print-style-alignAttributes,
  enclosureAttributes

## The principal-voice element represents principal and secondary voices in a score, either for analysis or for square bracket symbols that appear in a score. The symbol attribute indicates the type of symbol used at the start of the principal-voice. The content of the principal-voice element is used for analysis and may be any text value. When used for analysis separate from any printed score markings, the symbol attribute should be set to "none".
principal-voiceDefinition =
  xsd:string,
  attribute type { start-stopValues },
  attribute symbol { principal-voice-symbolValues },
  print-style-alignAttributes

## The print type contains general printing parameters, including the layout elements defined in the layout.mod file. The part-name-display and part-abbreviation-display elements used in the score.mod file may also be used here to change how a part name or abbreviation is displayed over the course of a piece. They take effect when the current measure or a succeeding measure starts a new system.
##	
## Layout elements in a print statement only apply to the current page, system, staff, or measure. Music that follows continues to take the default values from the layout included in the defaults element.
printDefinition =
  layoutGroup,
  element measure-layout { measure-layoutDefinition }?,
  element measure-numbering { measure-numberingDefinition }?,
  element part-name-display { name-displayDefinition }?,
  element part-abbreviation-display { name-displayDefinition }?,
  print-attributesAttributes

## The root type indicates a pitch like C, D, E vs. a function indication like I, II, III. It is used with chord symbols in popular music. The root element has a root-step and optional root-alter element similar to the step and alter elements, but renamed to distinguish the different musical meanings.
rootDefinition =
  element root-step { root-stepDefinition },
  element root-alter { root-alterDefinition }?

## The root-alter type represents the chromatic alteration of the root of the current chord within the harmony element. In some chord styles, the text for the root-step element may include root-alter information. In that case, the print-object attribute of the root-alter element can be set to no. The location attribute indicates whether the alteration should appear to the left or the right of the root-step; it is right by default.
root-alterDefinition =
  semitonesValues,
  print-objectAttributes,
  print-styleAttributes,
  attribute location { left-rightValues }?

## The root-step type represents the pitch step of the root of the current chord within the harmony element. The text attribute indicates how the root should appear in a score if not using the element contents.
root-stepDefinition =
  stepValues,
  attribute text { xsd:token }?,
  print-styleAttributes

## Scordatura string tunings are represented by a series of accord elements, similar to the staff-tuning elements. Strings are numbered from high to low.
scordaturaDefinition = element accord { accordDefinition }+

## The sound element contains general playback parameters. They can stand alone within a part/measure, or be a component element within a direction.
##	
## Tempo is expressed in quarter notes per minute. If 0, the sound-generating program should prompt the user at the time of compiling a sound (MIDI) file.
##	
## Dynamics (or MIDI velocity) are expressed as a percentage of the default forte value (90 for MIDI 1.0).
##	
## Dacapo indicates to go back to the beginning of the movement. When used it always has the value "yes".
##	
## Segno and dalsegno are used for backwards jumps to a segno sign; coda and tocoda are used for forward jumps to a coda sign. If there are multiple jumps, the value of these parameters can be used to name and distinguish them. If segno or coda is used, the divisions attribute can also be used to indicate the number of divisions per quarter note. Otherwise sound and MIDI generating programs may have to recompute this.
##	
## By default, a dalsegno or dacapo attribute indicates that the jump should occur the first time through, while a tocoda attribute indicates the jump should occur the second time through. The time that jumps occur can be changed by using the time-only attribute.
##	
## Forward-repeat is used when a forward repeat sign is implied, and usually follows a bar line. When used it always has the value of "yes".
##	
## The fine attribute follows the final note or rest in a movement with a da capo or dal segno direction. If numeric, the value represents the actual duration of the final note or rest, which can be ambiguous in written notation and different among parts and voices. The value may also be "yes" to indicate no change to the final duration.
##	
## If the sound element applies only particular times through a repeat, the time-only attribute indicates which times to apply the sound element.
##	
## Pizzicato in a sound element effects all following notes. Yes indicates pizzicato, no indicates arco.
## 
## The pan and elevation attributes are deprecated in Version 2.0. The pan and elevation elements in the midi-instrument element should be used instead. The meaning of the pan and elevation attributes is the same as for the pan and elevation elements. If both are present, the mid-instrument elements take priority.
##	
## The damper-pedal, soft-pedal, and sostenuto-pedal attributes effect playback of the three common piano pedals and their MIDI controller equivalents. The yes value indicates the pedal is depressed; no indicates the pedal is released. A numeric value from 0 to 100 may also be used for half pedaling. This value is the percentage that the pedal is depressed. A value of 0 is equivalent to no, and a value of 100 is equivalent to yes.
##	
## MIDI devices, MIDI instruments, and playback techniques are changed using the midi-device, midi-instrument, and play elements. When there are multiple instances of these elements, they should be grouped together by instrument using the id attribute values.
## 
## The offset element is used to indicate that the sound takes place offset from the current score position. If the sound element is a child of a direction element, the sound offset element overrides the direction offset element if both elements are present. Note that the offset reflects the intended musical position for the change in sound. It should not be used to compensate for latency issues in particular hardware configurations.
soundDefinition =
  (element midi-device { midi-deviceDefinition }?,
   element midi-instrument { midi-instrumentDefinition }?,
   element play { playDefinition }?)*,
  element offset { offsetDefinition }?,
  attribute tempo { non-negative-decimalValues }?,
  attribute dynamics { non-negative-decimalValues }?,
  attribute dacapo { yes-noValues }?,
  attribute segno { xsd:token }?,
  attribute dalsegno { xsd:token }?,
  attribute coda { xsd:token }?,
  attribute tocoda { xsd:token }?,
  attribute divisions { divisionsValues }?,
  attribute forward-repeat { yes-noValues }?,
  attribute fine { xsd:token }?,
  attribute time-only { time-onlyValues }?,
  attribute pizzicato { yes-noValues }?,
  attribute pan { rotation-degreesValues }?,
  attribute elevation { rotation-degreesValues }?,
  attribute damper-pedal { yes-no-numberValues }?,
  attribute soft-pedal { yes-no-numberValues }?,
  attribute sostenuto-pedal { yes-no-numberValues }?

## The stick type represents pictograms where the material of the stick, mallet, or beater is included.
stickDefinition =
  element stick-type { stick-typeValues },
  element stick-material { stick-materialValues },
  attribute tip { tip-directionValues }?

## The string-mute type represents string mute on and mute off symbols.
string-muteDefinition =
  attribute type { on-offValues },
  print-style-alignAttributes

## The wedge type represents crescendo and diminuendo wedge symbols. The type attribute is crescendo for the start of a wedge that is closed at the left side, and diminuendo for the start of a wedge that is closed on the right side. Spread values are measured in tenths; those at the start of a crescendo wedge or end of a diminuendo wedge are ignored. The niente attribute is yes if a circle appears at the point of the wedge, indicating a crescendo from nothing or diminuendo to nothing. It is no by default, and used only when the type is crescendo, or the type is stop for a wedge that began with a diminuendo type. The line-type is solid by default.
wedgeDefinition =
  attribute type { wedge-typeValues },
  attribute number { number-levelValues }?,
  attribute spread { tenthsValues }?,
  attribute niente { yes-noValues }?,
  line-typeAttributes,
  dashed-formattingAttributes,
  positionAttributes,
  colorAttributes

## The encoding element contains information about who did the digital encoding, when, with what software, and in what aspects. Standard type values for the encoder element are music, words, and arrangement, but other types may be used. The type attribute is only needed when there are multiple encoder elements.
encodingDefinition =
  (element encoding-date { yyyy-mm-ddValues }
   | element encoder { typed-textDefinition }
   | element software { xsd:string }
   | element encoding-description { xsd:string }
   | element supports { supportsDefinition })*

## Identification contains basic metadata about the score. It includes the information in MuseData headers that may apply at a score-wide, movement-wide, or part-wide level. The creator, rights, source, and relation elements are based on Dublin Core.
identificationDefinition =
  element creator {
    typed-textDefinition
    >> a:documentation [
         "The creator element is borrowed from Dublin Core. It is used for the creators of the score. The type attribute is used to distinguish different creative contributions. Thus, there can be multiple creators within an identification. Standard type values are composer, lyricist, and arranger. Other type values may be used for different types of creative roles. The type attribute should usually be used even if there is just a single creator element. The MusicXML format does not use the creator / contributor distinction from Dublin Core."
       ]
  }*,
  element rights {
    typed-textDefinition
    >> a:documentation [
         "The rights element is borrowed from Dublin Core. It contains copyright and other intellectual property notices. Words, music, and derivatives can have different types, so multiple rights tags with different type attributes are supported. Standard type values are music, words, and arrangement, but other types may be used. The type attribute is only needed when there are multiple rights elements."
       ]
  }*,
  element encoding { encodingDefinition }?,
  element source {
    xsd:string
    >> a:documentation [
         "The source for the music that is encoded. This is similar to the Dublin Core source element."
       ]
  }?,
  element relation {
    typed-textDefinition
    >> a:documentation [
         "A related resource for the music that is encoded. This is similar to the Dublin Core relation element. Standard type values are music, words, and arrangement, but other types may be used."
       ]
  }*,
  element miscellaneous { miscellaneousDefinition }?

## If a program has other metadata not yet supported in the MusicXML format, it can go in the miscellaneous element. The miscellaneous type puts each separate part of metadata into its own miscellaneous-field type.
miscellaneousDefinition =
  element miscellaneous-field { miscellaneous-fieldDefinition }*

## If a program has other metadata not yet supported in the MusicXML format, each type of metadata can go in a miscellaneous-field element. The required name attribute indicates the type of metadata the element content represents.
miscellaneous-fieldDefinition =
  xsd:string,
  attribute name { xsd:token }

## The supports type indicates if a MusicXML encoding supports a particular MusicXML element. This is recommended for elements like beam, stem, and accidental, where the absence of an element is ambiguous if you do not know if the encoding supports that element. For Version 2.0, the supports element is expanded to allow programs to indicate support for particular attributes or particular values. This lets applications communicate, for example, that all system and/or page breaks are contained in the MusicXML file.
supportsDefinition =
  attribute type { yes-noValues },
  attribute element { xsd:NMTOKEN },
  attribute attribute { xsd:NMTOKEN }?,
  attribute value { xsd:token }?

## The appearance type controls general graphical settings for the music's final form appearance on a printed page of display. This includes support for line widths, definitions for note sizes, and standard distances between notation elements, plus an extension element for other aspects of appearance.
appearanceDefinition =
  element line-width { line-widthDefinition }*,
  element note-size { note-sizeDefinition }*,
  element distance { distanceDefinition }*,
  element other-appearance { other-appearanceDefinition }*

## The distance element represents standard distances between notation elements in tenths. The type attribute defines what type of distance is being defined. Valid values include hyphen (for hyphens in lyrics) and beam.
distanceDefinition =
  tenthsValues,
  attribute type { distance-typeValues }

## The line-width type indicates the width of a line type in tenths. The type attribute defines what type of line is being defined. Values include beam, bracket, dashes, enclosure, ending, extend, heavy barline, leger, light barline, octave shift, pedal, slur middle, slur tip, staff, stem, tie middle, tie tip, tuplet bracket, and wedge. The text content is expressed in tenths.
line-widthDefinition =
  tenthsValues,
  attribute type { line-width-typeValues }

## The measure-layout type includes the horizontal distance from the previous measure.
measure-layoutDefinition =
  element measure-distance {
    tenthsValues
    >> a:documentation [
         "The measure-distance element specifies the horizontal distance from the previous measure. This value is only used for systems where there is horizontal whitespace in the middle of a system, as in systems with codas. To specify the measure width, use the width attribute of the measure element."
       ]
  }?

## The note-size type indicates the percentage of the regular note size to use for notes with a cue and large size as defined in the type element. The grace type is used for notes of cue size that that include a grace element. The cue type is used for all other notes with cue size, whether defined explicitly or implicitly via a cue element. The large type is used for notes of large size. The text content represent the numeric percentage. A value of 100 would be identical to the size of a regular note as defined by the music font.
note-sizeDefinition =
  non-negative-decimalValues,
  attribute type { note-size-typeValues }

## The other-appearance type is used to define any graphical settings not yet in the current version of the MusicXML format. This allows extended representation, though without application interoperability.
other-appearanceDefinition =
  xsd:string,
  attribute type { xsd:token }

## Page layout can be defined both in score-wide defaults and in the print element. Page margins are specified either for both even and odd pages, or via separate odd and even page number values. The type is not needed when used as part of a print element. If omitted when used in the defaults element, "both" is the default.
page-layoutDefinition =
  (element page-height { tenthsValues },
   element page-width { tenthsValues })?,
  element page-margins { page-marginsDefinition }?,
  element page-margins { page-marginsDefinition }?

## Page margins are specified either for both even and odd pages, or via separate odd and even page number values. The type attribute is not needed when used as part of a print element. If omitted when the page-margins type is used in the defaults element, "both" is the default value.
page-marginsDefinition =
  all-marginsGroup,
  attribute type { margin-typeValues }?

## Margins, page sizes, and distances are all measured in tenths to keep MusicXML data in a consistent coordinate system as much as possible. The translation to absolute units is done with the scaling type, which specifies how many millimeters are equal to how many tenths. For a staff height of 7 mm, millimeters would be set to 7 while tenths is set to 40. The ability to set a formula rather than a single scaling factor helps avoid roundoff errors.
scalingDefinition =
  element millimeters { millimetersValues },
  element tenths { tenthsValues }

## Staff layout includes the vertical distance from the bottom line of the previous staff in this system to the top line of the staff specified by the number attribute. The optional number attribute refers to staff numbers within the part, from top to bottom on the system. A value of 1 is assumed if not present. When used in the defaults element, the values apply to all parts. This value is ignored for the first staff in a system.
staff-layoutDefinition =
  element staff-distance { tenthsValues }?,
  attribute number { staff-numberValues }?

## The system-dividers element indicates the presence or absence of system dividers (also known as system separation marks) between systems displayed on the same page. Dividers on the left and right side of the page are controlled by the left-divider and right-divider elements respectively. The default vertical position is half the system-distance value from the top of the system that is below the divider. The default horizontal position is the left and right system margin, respectively.
## 
## When used in the print element, the system-dividers element affects the dividers that would appear between the current system and the previous system.
system-dividersDefinition =
  element left-divider { empty-print-object-style-alignDefinition },
  element right-divider { empty-print-object-style-alignDefinition }

## A system is a group of staves that are read and played simultaneously. System layout includes left and right margins and the vertical distance from the previous system. The system distance is measured from the bottom line of the previous system to the top line of the current system. It is ignored for the first system on a page. The top system distance is measured from the page's top margin to the top line of the first system. It is ignored for all but the first system on a page.
##	
## Sometimes the sum of measure widths in a system may not equal the system width specified by the layout elements due to roundoff or other errors. The behavior when reading MusicXML files in these cases is application-dependent. For instance, applications may find that the system layout data is more reliable than the sum of the measure widths, and adjust the measure widths accordingly.
system-layoutDefinition =
  element system-margins { system-marginsDefinition }?,
  element system-distance { tenthsValues }?,
  element top-system-distance { tenthsValues }?,
  element system-dividers { system-dividersDefinition }?

## System margins are relative to the page margins. Positive values indent and negative values reduce the margin size.
system-marginsDefinition = left-right-marginsGroup

## The bookmark type serves as a well-defined target for an incoming simple XLink.
bookmarkDefinition =
  attribute id { xsd:ID },
  attribute name { xsd:token }?,
  element-positionAttributes

## The link type serves as an outgoing simple XLink. It is also used to connect a MusicXML score with a MusicXML opus. If a relative link is used within a document that is part of a compressed MusicXML file, the link is relative to the  root folder of the zip file.
linkDefinition =
  link-attributesAttributes,
  attribute name { xsd:token }?,
  element-positionAttributes,
  positionAttributes

## The accidental type represents actual notated accidentals. Editorial and cautionary indications are indicated by attributes. Values for these attributes are "no" if not present. Specific graphic display such as parentheses, brackets, and size are controlled by the level-display attribute group.
accidentalDefinition =
  accidental-valueValues,
  attribute cautionary { yes-noValues }?,
  attribute editorial { yes-noValues }?,
  level-displayAttributes,
  print-styleAttributes

## An accidental-mark can be used as a separate notation or as part of an ornament. When used in an ornament, position and placement are relative to the ornament, not relative to the note.
accidental-markDefinition =
  accidental-valueValues, print-styleAttributes, placementAttributes

## The arpeggiate type indicates that this note is part of an arpeggiated chord. The number attribute can be used to distinguish between two simultaneous chords arpeggiated separately (different numbers) or together (same number). The up-down attribute is used if there is an arrow on the arpeggio sign. By default, arpeggios go from the lowest to highest note.
arpeggiateDefinition =
  attribute number { number-levelValues }?,
  attribute direction { up-downValues }?,
  positionAttributes,
  placementAttributes,
  colorAttributes

## Articulations and accents are grouped together here.
articulationsDefinition =
  (element accent {
     empty-placementDefinition
     >> a:documentation [
          "The accent element indicates a regular horizontal accent mark."
        ]
   }
   | element strong-accent {
       strong-accentDefinition
       >> a:documentation [
            "The strong-accent element indicates a vertical accent mark."
          ]
     }
   | element staccato {
       empty-placementDefinition
       >> a:documentation [
            "The staccato element is used for a dot articulation, as opposed to a stroke or a wedge."
          ]
     }
   | element tenuto {
       empty-placementDefinition
       >> a:documentation [
            "The tenuto element indicates a tenuto line symbol."
          ]
     }
   | element detached-legato {
       empty-placementDefinition
       >> a:documentation [
            "The detached-legato element indicates the combination of a tenuto line and staccato dot symbol."
          ]
     }
   | element staccatissimo {
       empty-placementDefinition
       >> a:documentation [
            "The staccatissimo element is used for a wedge articulation, as opposed to a dot or a stroke."
          ]
     }
   | element spiccato {
       empty-placementDefinition
       >> a:documentation [
            "The spiccato element is used for a stroke articulation, as opposed to a dot or a wedge."
          ]
     }
   | element scoop {
       empty-lineDefinition
       >> a:documentation [
            "The scoop element is an indeterminate slide attached to a single note. The scoop element appears before the main note and comes from below the main pitch."
          ]
     }
   | element plop {
       empty-lineDefinition
       >> a:documentation [
            "The plop element is an indeterminate slide attached to a single note. The plop element appears before the main note and comes from above the main pitch."
          ]
     }
   | element doit {
       empty-lineDefinition
       >> a:documentation [
            "The doit element is an indeterminate slide attached to a single note. The doit element appears after the main note and goes above the main pitch."
          ]
     }
   | element falloff {
       empty-lineDefinition
       >> a:documentation [
            "The falloff element is an indeterminate slide attached to a single note. The falloff element appears before the main note and goes below the main pitch."
          ]
     }
   | element breath-mark { breath-markDefinition }
   | element caesura {
       empty-placementDefinition
       >> a:documentation [
            'The caesura element indicates a slight pause. It is notated using a "railroad tracks" symbol.'
          ]
     }
   | element stress {
       empty-placementDefinition
       >> a:documentation [
            "The stress element indicates a stressed note."
          ]
     }
   | element unstress {
       empty-placementDefinition
       >> a:documentation [
            "The unstress element indicates an unstressed note. It is often notated using a u-shaped symbol."
          ]
     }
   | element other-articulation {
       placement-textDefinition
       >> a:documentation [
            "The other-articulation element is used to define any articulations not yet in the MusicXML format. This allows extended representation, though without application interoperability."
          ]
     })*

## The arrow element represents an arrow used for a musical technical indication..
arrowDefinition =
  ((element arrow-direction { arrow-directionValues },
    element arrow-style { arrow-styleValues }?)
   | element circular-arrow { circular-arrowValues }),
  print-styleAttributes,
  placementAttributes

## The backup and forward elements are required to coordinate multiple voices in one part, including music on multiple staves. The backup type is generally used to move between voices and staves. Thus the backup element does not include voice or staff elements. Duration values should always be positive, and should not cross measure boundaries or mid-measure changes in the divisions value.
backupDefinition = durationGroup, editorialGroup

## Beam values include begin, continue, end, forward hook, and backward hook. Up to eight concurrent beams are available to cover up to 1024th notes. Each beam in a note is represented with a separate beam element, starting with the eighth note beam using a number attribute of 1.
## 
## Note that the beam number does not distinguish sets of beams that overlap, as it does for slur and other elements. Beaming groups are distinguished by being in different voices and/or the presence or absence of grace and cue elements.
## 
## Beams that have a begin value can also have a fan attribute to indicate accelerandos and ritardandos using fanned beams. The fan attribute may also be used with a continue value if the fanning direction changes on that note. The value is "none" if not specified.
##	
## The repeater attribute has been deprecated in MusicXML 3.0. Formerly used for tremolos, it needs to be specified with a "yes" value for each beam using it.
beamDefinition =
  beam-valueValues,
  attribute number { beam-levelValues }?,
  attribute repeater { yes-noValues }?,
  attribute fan { fanValues }?,
  colorAttributes

## The bend type is used in guitar and tablature. The bend-alter element indicates the number of steps in the bend, similar to the alter element. As with the alter element, numbers like 0.5 can be used to indicate microtones. Negative numbers indicate pre-bends or releases; the pre-bend and release elements are used to distinguish what is intended. A with-bar element indicates that the bend is to be done at the bridge with a whammy or vibrato bar. The content of the element indicates how this should be notated.
bendDefinition =
  element bend-alter {
    semitonesValues
    >> a:documentation [
         "The bend-alter element indicates the number of steps in the bend, similar to the alter element. As with the alter element, numbers like 0.5 can be used to indicate microtones. Negative numbers indicate pre-bends or releases; the pre-bend and release elements are used to distinguish what is intended."
       ]
  },
  (element pre-bend { empty }
   | element release { empty })?,
  element with-bar {
    placement-textDefinition
    >> a:documentation [
         "The with-bar element indicates that the bend is to be done at the bridge with a whammy or vibrato bar. The content of the element indicates how this should be notated."
       ]
  }?,
  print-styleAttributes,
  bend-soundAttributes

## The breath-mark element indicates a place to take a breath.
breath-markDefinition =
  breath-mark-valueValues, print-styleAttributes, placementAttributes

## The empty-line type represents an empty element with line-shape, line-type, dashed-formatting, print-style and placement attributes.
empty-lineDefinition =
  line-shapeAttributes,
  line-typeAttributes,
  dashed-formattingAttributes,
  print-styleAttributes,
  placementAttributes

## The extend type represents lyric word extension / melisma lines as well as figured bass extensions. The optional type and position attributes are added in Version 3.0 to provide better formatting control.
extendDefinition =
  attribute type { start-stop-continueValues }?,
  print-styleAttributes

## The figure type represents a single figure within a figured-bass element.
figureDefinition =
  element prefix {
    style-textDefinition
    >> a:documentation [
         "Values for the prefix element include the accidental values sharp, flat, natural, double-sharp, flat-flat, and sharp-sharp. The prefix element may contain additional values for symbols specific to particular figured bass styles."
       ]
  }?,
  element figure-number {
    style-textDefinition
    >> a:documentation [
         "A figure-number is a number. Overstrikes of the figure number are represented in the suffix element."
       ]
  }?,
  element suffix {
    style-textDefinition
    >> a:documentation [
         "Values for the suffix element include the accidental values sharp, flat, natural, double-sharp, flat-flat, and sharp-sharp. Suffixes include both symbols that come after the figure number and those that overstrike the figure number. The suffix value slash is used for slashed numbers indicating chromatic alteration. The orientation and display of the slash usually depends on the figure number. The suffix element may contain additional values for symbols specific to particular figured bass styles."
       ]
  }?,
  element extend { extendDefinition }?

## The figured-bass element represents figured bass notation. Figured bass elements take their position from the first regular note (not a grace note or chord note) that follows in score order. The optional duration element is used to indicate changes of figures under a note.
##	
## Figures are ordered from top to bottom. The value of parentheses is "no" if not present.
figured-bassDefinition =
  element figure { figureDefinition }+,
  durationGroup?,
  editorialGroup,
  print-styleAttributes,
  printoutAttributes,
  attribute parentheses { yes-noValues }?

## The backup and forward elements are required to coordinate multiple voices in one part, including music on multiple staves. The forward element is generally used within voices and staves. Duration values should always be positive, and should not cross measure boundaries or mid-measure changes in the divisions value.
forwardDefinition = durationGroup, editorial-voiceGroup, staffGroup?

## Glissando and slide types both indicate rapidly moving from one pitch to the other so that individual notes are not discerned. The distinction is similar to that between NIFF's glissando and portamento elements. A glissando sounds the half notes in between the slide and defaults to a wavy line. The optional text is printed alongside the line.
glissandoDefinition =
  xsd:string,
  attribute type { start-stopValues },
  attribute number { number-levelValues }?,
  line-typeAttributes,
  dashed-formattingAttributes,
  print-styleAttributes

## The grace type indicates the presence of a grace note. The slash attribute for a grace note is yes for slashed eighth notes. The other grace note attributes come from MuseData sound suggestions. The steal-time-previous attribute indicates the percentage of time to steal from the previous note for the grace note. The steal-time-following attribute indicates the percentage of time to steal from the following note for the grace note, as for appoggiaturas. The make-time attribute indicates to make time, not steal time; the units are in real-time divisions for the grace note.
graceDefinition =
  attribute steal-time-previous { percentValues }?,
  attribute steal-time-following { percentValues }?,
  attribute make-time { divisionsValues }?,
  attribute slash { yes-noValues }?

## The hammer-on and pull-off elements are used in guitar and fretted instrument notation. Since a single slur can be marked over many notes, the hammer-on and pull-off elements are separate so the individual pair of notes can be specified. The element content can be used to specify how the hammer-on or pull-off should be notated. An empty element leaves this choice up to the application.
hammer-on-pull-offDefinition =
  xsd:string,
  attribute type { start-stopValues },
  attribute number { number-levelValues }?,
  print-styleAttributes,
  placementAttributes

## The handbell element represents notation for various techniques used in handbell and handchime music.
handbellDefinition =
  handbell-valueValues, print-styleAttributes, placementAttributes

## The harmonic type indicates natural and artificial harmonics. Allowing the type of pitch to be specified, combined with controls for appearance/playback differences, allows both the notation and the sound to be represented. Artificial harmonics can add a notated touching-pitch; artificial pinch harmonics will usually not notate a touching pitch. The attributes for the harmonic element refer to the use of the circular harmonic symbol, typically but not always used with natural harmonics.
harmonicDefinition =
  (element natural { empty }
   | element artificial { empty })?,
  (element base-pitch { empty }
   | element touching-pitch { empty }
   | element sounding-pitch { empty })?,
  print-objectAttributes,
  print-styleAttributes,
  placementAttributes

## The heel and toe elements are used with organ pedals. The substitution value is "no" if the attribute is not present.
heel-toeDefinition =
  empty-placementDefinition,
  attribute substitution { yes-noValues }?

## The hole type represents the symbols used for woodwind and brass fingerings as well as other notations.
holeDefinition =
  element hole-type {
    xsd:string
    >> a:documentation [
         "The content of the optional hole-type element indicates what the hole symbol represents in terms of instrument fingering or other techniques."
       ]
  }?,
  element hole-closed { hole-closedDefinition },
  element hole-shape {
    xsd:string
    >> a:documentation [
         "The optional hole-shape element indicates the shape of the hole symbol; the default is a circle."
       ]
  }?,
  print-styleAttributes,
  placementAttributes

## The hole-closed type represents whether the hole is closed, open, or half-open. The optional location attribute indicates which portion of the hole is filled in when the element value is half.
hole-closedDefinition =
  hole-closed-valueValues,
  attribute location { hole-closed-locationValues }?

## The instrument type distinguishes between score-instrument elements in a score-part. The id attribute is an IDREF back to the score-instrument ID. If multiple score-instruments are specified on a score-part, there should be an instrument element for each note in the part.
instrumentDefinition = attribute id { xsd:IDREF }

## The lyric type represents text underlays for lyrics, based on Humdrum with support for other formats. Two text elements that are not separated by an elision element are part of the same syllable, but may have different text formatting. The MusicXML 2.0 XSD is more strict than the 2.0 DTD in enforcing this by disallowing a second syllabic element unless preceded by an elision element. The lyric number indicates multiple lines, though a name can be used as well (as in Finale's verse / chorus / section specification). Justification is center by default; placement is below by default. The content of the elision type is used to specify the symbol used to display the elision. Common values are a no-break space (Unicode 00A0), an underscore (Unicode 005F), or an undertie (Unicode 203F).
lyricDefinition =
  ((element syllabic { syllabicValues }?,
    element text { text-element-dataDefinition },
    ((element elision { text-font-colorDefinition },
      element syllabic { syllabicValues }?)?,
     element text { text-element-dataDefinition })*,
    element extend { extendDefinition }?)
   | element extend { extendDefinition }
   | element laughing { empty }
   | element humming { empty }),
  element end-line { empty }?,
  element end-paragraph { empty }?,
  editorialGroup,
  attribute number { xsd:NMTOKEN }?,
  attribute name { xsd:token }?,
  justifyAttributes,
  positionAttributes,
  placementAttributes,
  colorAttributes,
  print-objectAttributes

## The mordent type is used for both represents the mordent sign with the vertical line and the inverted-mordent sign without the line. The long attribute is "no" by default. The approach and departure attributes are used for compound ornaments, indicating how the beginning and ending of the ornament look relative to the main part of the mordent.
mordentDefinition =
  empty-trill-soundDefinition,
  attribute long { yes-noValues }?,
  attribute approach { above-belowValues }?,
  attribute departure { above-belowValues }?

## The non-arpeggiate type indicates that this note is at the top or bottom of a bracket indicating to not arpeggiate these notes. Since this does not involve playback, it is only used on the top or bottom notes, not on each note as for the arpeggiate type.
non-arpeggiateDefinition =
  attribute type { top-bottomValues },
  attribute number { number-levelValues }?,
  positionAttributes,
  placementAttributes,
  colorAttributes

## Notations refer to musical notations, not XML notations. Multiple notations are allowed in order to represent multiple editorial levels. The print-object attribute, added in Version 3.0, allows notations to represent details of performance technique, such as fingerings, without having them appear in the score.
notationsDefinition =
  editorialGroup,
  (element tied { tiedDefinition }
   | element slur { slurDefinition }
   | element tuplet { tupletDefinition }
   | element glissando { glissandoDefinition }
   | element slide { slideDefinition }
   | element ornaments { ornamentsDefinition }
   | element technical { technicalDefinition }
   | element articulations { articulationsDefinition }
   | element dynamics { dynamicsDefinition }
   | element fermata { fermataDefinition }
   | element arpeggiate { arpeggiateDefinition }
   | element non-arpeggiate { non-arpeggiateDefinition }
   | element accidental-mark { accidental-markDefinition }
   | element other-notation { other-notationDefinition })*,
  print-objectAttributes

## Notes are the most common type of MusicXML data. The MusicXML format keeps the MuseData distinction between elements used for sound information and elements used for notation information (e.g., tie is used for sound, tied for notation). Thus grace notes do not have a duration element. Cue notes have a duration element, as do forward elements, but no tie elements. Having these two types of information available can make interchange considerably easier, as some programs handle one type of information much more readily than the other. 
##	
## The dynamics and end-dynamics attributes correspond to MIDI 1.0's Note On and Note Off velocities, respectively. They are expressed in terms of percentages of the default forte value (90 for MIDI 1.0). The attack and release attributes are used to alter the starting and stopping time of the note from when it would otherwise occur based on the flow of durations - information that is specific to a performance. They are expressed in terms of divisions, either positive or negative. A note that starts a tie should not have a release attribute, and a note that stops a tie should not have an attack attribute. If a note is played only particular times through a repeat, the time-only attribute shows which times to play the note. The pizzicato attribute is used when just this note is sounded pizzicato, vs. the pizzicato element which changes overall playback between pizzicato and arco.
noteDefinition =
  ((element grace { graceDefinition },
    full-noteGroup,
    element tie { tieDefinition }?,
    element tie { tieDefinition }?)
   | (element cue { empty },
      full-noteGroup,
      durationGroup)
   | (full-noteGroup,
      durationGroup,
      element tie { tieDefinition }?,
      element tie { tieDefinition }?)),
  element instrument { instrumentDefinition }?,
  editorial-voiceGroup,
  element type { note-typeDefinition }?,
  element dot {
    empty-placementDefinition
    >> a:documentation [
         "One dot element is used for each dot of prolongation. The placement element is used to specify whether the dot should appear above or below the staff line. It is ignored for notes that appear on a staff space."
       ]
  }*,
  element accidental { accidentalDefinition }?,
  element time-modification { time-modificationDefinition }?,
  element stem { stemDefinition }?,
  element notehead { noteheadDefinition }?,
  element notehead-text { notehead-textDefinition }?,
  staffGroup?,
  element beam { beamDefinition }?,
  element beam { beamDefinition }?,
  element beam { beamDefinition }?,
  element beam { beamDefinition }?,
  element beam { beamDefinition }?,
  element beam { beamDefinition }?,
  element beam { beamDefinition }?,
  element beam { beamDefinition }?,
  element notations { notationsDefinition }*,
  element lyric { lyricDefinition }*,
  element play { playDefinition }?,
  x-positionAttributes,
  fontAttributes,
  colorAttributes,
  printoutAttributes,
  attribute dynamics { non-negative-decimalValues }?,
  attribute end-dynamics { non-negative-decimalValues }?,
  attribute attack { divisionsValues }?,
  attribute release { divisionsValues }?,
  attribute time-only { time-onlyValues }?,
  attribute pizzicato { yes-noValues }?

## The note-type type indicates the graphic note type. Values range from 256th to long. The size attribute indicates full, cue, or large size, with full the default for regular notes and cue the default for cue and grace notes.
note-typeDefinition =
  note-type-valueValues,
  attribute size { symbol-sizeValues }?

## The notehead element indicates shapes other than the open and closed ovals associated with note durations.
##	
## For the enclosed shapes, the default is to be hollow for half notes and longer, and filled otherwise. The filled attribute can be set to change this if needed.
##	
## If the parentheses attribute is set to yes, the notehead is parenthesized. It is no by default.
noteheadDefinition =
  notehead-valueValues,
  attribute filled { yes-noValues }?,
  attribute parentheses { yes-noValues }?,
  fontAttributes,
  colorAttributes

## The notehead-text type represents text that is displayed inside a notehead, as is done in some educational music. It is not needed for the numbers used in tablature or jianpu notation. The presence of a TAB or jianpu clefs is sufficient to indicate that numbers are used. The display-text and accidental-text elements allow display of fully formatted text and accidentals.
notehead-textDefinition =
  (element display-text { formatted-textDefinition }
   | element accidental-text { accidental-textDefinition })+

## Ornaments can be any of several types, followed optionally by accidentals. The accidental-mark element's content is represented the same as an accidental element, but with a different name to reflect the different musical meaning.
ornamentsDefinition =
  ((element trill-mark {
      empty-trill-soundDefinition
      >> a:documentation [
           "The trill-mark element represents the trill-mark symbol."
         ]
    }
    | element turn {
        horizontal-turnDefinition
        >> a:documentation [
             "The turn element is the normal turn shape which goes up then down."
           ]
      }
    | element delayed-turn {
        horizontal-turnDefinition
        >> a:documentation [
             "The delayed-turn element indicates a normal turn that is delayed until the end of the current note."
           ]
      }
    | element inverted-turn {
        horizontal-turnDefinition
        >> a:documentation [
             "The inverted-turn element has the shape which goes down and then up."
           ]
      }
    | element delayed-inverted-turn {
        horizontal-turnDefinition
        >> a:documentation [
             "The delayed-inverted-turn element indicates an inverted turn that is delayed until the end of the current note."
           ]
      }
    | element vertical-turn {
        empty-trill-soundDefinition
        >> a:documentation [
             "The vertical-turn element has the turn symbol shape arranged vertically going from upper left to lower right."
           ]
      }
    | element shake {
        empty-trill-soundDefinition
        >> a:documentation [
             "The shake element has a similar appearance to an inverted-mordent element."
           ]
      }
    | element wavy-line { wavy-lineDefinition }
    | element mordent {
        mordentDefinition
        >> a:documentation [
             'The mordent element represents the sign with the vertical line. The long attribute is "no" by default.'
           ]
      }
    | element inverted-mordent {
        mordentDefinition
        >> a:documentation [
             'The inverted-mordent element represents the sign without the vertical line. The long attribute is "no" by default.'
           ]
      }
    | element schleifer {
        empty-placementDefinition
        >> a:documentation [
             "The name for this ornament is based on the German, to avoid confusion with the more common slide element defined earlier."
           ]
      }
    | element tremolo { tremoloDefinition }
    | element other-ornament {
        placement-textDefinition
        >> a:documentation [
             "The other-ornament element is used to define any ornaments not yet in the MusicXML format. This allows extended representation, though without application interoperability."
           ]
      }),
   element accidental-mark { accidental-markDefinition }*)*

## The other-notation type is used to define any notations not yet in the MusicXML format. This allows extended representation, though without application interoperability. It handles notations where more specific extension elements such as other-dynamics and other-technical are not appropriate.
other-notationDefinition =
  xsd:string,
  attribute type { start-stop-singleValues },
  attribute number { number-levelValues }?,
  print-objectAttributes,
  print-styleAttributes,
  placementAttributes

## Pitch is represented as a combination of the step of the diatonic scale, the chromatic alteration, and the octave.
pitchDefinition =
  element step { stepValues },
  element alter { semitonesValues }?,
  element octave { octaveValues }

## The placement-text type represents a text element with print-style and placement attribute groups.
placement-textDefinition =
  xsd:string, print-styleAttributes, placementAttributes

## The rest element indicates notated rests or silences. Rest elements are usually empty, but placement on the staff can be specified using display-step and display-octave elements. If the measure attribute is set to yes, this indicates this is a complete measure rest.
restDefinition =
  display-step-octaveGroup?,
  attribute measure { yes-noValues }?

## Glissando and slide types both indicate rapidly moving from one pitch to the other so that individual notes are not discerned. The distinction is similar to that between NIFF's glissando and portamento elements. A slide is continuous between two notes and defaults to a solid line. The optional text for a is printed alongside the line.
slideDefinition =
  xsd:string,
  attribute type { start-stopValues },
  attribute number { number-levelValues }?,
  line-typeAttributes,
  dashed-formattingAttributes,
  print-styleAttributes,
  bend-soundAttributes

## Slur types are empty. Most slurs are represented with two elements: one with a start type, and one with a stop type. Slurs can add more elements using a continue type. This is typically used to specify the formatting of cross-system slurs, or to specify the shape of very complex slurs.
slurDefinition =
  attribute type { start-stop-continueValues },
  attribute number { number-levelValues }?,
  line-typeAttributes,
  dashed-formattingAttributes,
  positionAttributes,
  placementAttributes,
  orientationAttributes,
  bezierAttributes,
  colorAttributes

## Stems can be down, up, none, or double. For down and up stems, the position attributes can be used to specify stem length. The relative values specify the end of the stem relative to the program default. Default values specify an absolute end stem position. Negative values of relative-y that would flip a stem instead of shortening it are ignored. A stem element associated with a rest refers to a stemlet.
stemDefinition = stem-valueValues, y-positionAttributes, colorAttributes

## The strong-accent type indicates a vertical accent mark. The type attribute indicates if the point of the accent is down or up.
strong-accentDefinition =
  empty-placementDefinition,
  attribute type { up-downValues }?

## The style-text type represents a text element with a print-style attribute group.
style-textDefinition = xsd:string, print-styleAttributes

## Technical indications give performance information for individual instruments.
technicalDefinition =
  (element up-bow {
     empty-placementDefinition
     >> a:documentation [
          "The up-bow element represents the symbol that is used both for up-bowing on bowed instruments, and up-stroke on plucked instruments."
        ]
   }
   | element down-bow {
       empty-placementDefinition
       >> a:documentation [
            "The down-bow element represents the symbol that is used both for down-bowing on bowed instruments, and down-stroke on plucked instruments."
          ]
     }
   | element harmonic { harmonicDefinition }
   | element open-string {
       empty-placementDefinition
       >> a:documentation [
            "The open-string element represents the zero-shaped open string symbol."
          ]
     }
   | element thumb-position {
       empty-placementDefinition
       >> a:documentation [
            "The thumb-position element represents the thumb position symbol. This is a circle with a line, where the line does not come within the circle. It is distinct from the snap pizzicato symbol, where the line comes inside the circle."
          ]
     }
   | element fingering { fingeringDefinition }
   | element pluck {
       placement-textDefinition
       >> a:documentation [
            "The pluck element is used to specify the plucking fingering on a fretted instrument, where the fingering element refers to the fretting fingering. Typical values are p, i, m, a for pulgar/thumb, indicio/index, medio/middle, and anular/ring fingers."
          ]
     }
   | element double-tongue {
       empty-placementDefinition
       >> a:documentation [
            "The double-tongue element represents the double tongue symbol (two dots arranged horizontally)."
          ]
     }
   | element triple-tongue {
       empty-placementDefinition
       >> a:documentation [
            "The triple-tongue element represents the triple tongue symbol (three dots arranged horizontally)."
          ]
     }
   | element stopped {
       empty-placementDefinition
       >> a:documentation [
            "The stopped element represents the stopped symbol, which looks like a plus sign."
          ]
     }
   | element snap-pizzicato {
       empty-placementDefinition
       >> a:documentation [
            "	The snap-pizzicato element represents the snap pizzicato symbol. This is a circle with a line, where the line comes inside the circle. It is distinct from the thumb-position symbol, where the line does not come inside the circle."
          ]
     }
   | element fret { fretDefinition }
   | element string { stringDefinition }
   | element hammer-on { hammer-on-pull-offDefinition }
   | element pull-off { hammer-on-pull-offDefinition }
   | element bend { bendDefinition }
   | element tap {
       placement-textDefinition
       >> a:documentation [
            "The tap element indicates a tap on the fretboard. The element content allows specification of the notation; + and T are common choices. If empty, the display is application-specific."
          ]
     }
   | element heel { heel-toeDefinition }
   | element toe { heel-toeDefinition }
   | element fingernails {
       empty-placementDefinition
       >> a:documentation [
            "The fingernails element is used in notation for harp and other plucked string instruments."
          ]
     }
   | element hole { holeDefinition }
   | element arrow { arrowDefinition }
   | element handbell { handbellDefinition }
   | element other-technical {
       placement-textDefinition
       >> a:documentation [
            "The other-technical element is used to define any technical indications not yet in the MusicXML format. This allows extended representation, though without application interoperability."
          ]
     })*

## The text-element-data type represents a syllable or portion of a syllable for lyric text underlay. A hyphen in the string content should only be used for an actual hyphenated word. Language names for text elements come from ISO 639, with optional country subcodes from ISO 3166.
text-element-dataDefinition =
  xsd:string,
  fontAttributes,
  colorAttributes,
  text-decorationAttributes,
  text-rotationAttributes,
  letter-spacingAttributes,
  xml.lang.attrib?,
  text-directionAttributes

## The text-font-color type represents text with optional font and color information. It is used for the elision element.
text-font-colorDefinition =
  xsd:string,
  fontAttributes,
  colorAttributes,
  text-decorationAttributes,
  text-rotationAttributes,
  letter-spacingAttributes,
  xml.lang.attrib?,
  text-directionAttributes

## The tie element indicates that a tie begins or ends with this note. If the tie element applies only particular times through a repeat, the time-only attribute indicates which times to apply it. The tie element indicates sound; the tied element indicates notation.
tieDefinition =
  attribute type { start-stopValues },
  attribute time-only { time-onlyValues }?

## The tied type represents the notated tie. The tie element represents the tie sound.
## 
## The number attribute is rarely needed to disambiguate ties, since note pitches will usually suffice. The attribute is implied rather than defaulting to 1 as with most elements. It is available for use in more complex tied notation situations.
tiedDefinition =
  attribute type { start-stop-continueValues },
  attribute number { number-levelValues }?,
  line-typeAttributes,
  dashed-formattingAttributes,
  positionAttributes,
  placementAttributes,
  orientationAttributes,
  bezierAttributes,
  colorAttributes

## Time modification indicates tuplets, double-note tremolos, and other durational changes. A time-modification element shows how the cumulative, sounding effect of tuplets and double-note tremolos compare to the written note type represented by the type and dot elements. Nested tuplets and other notations that use more detailed information need both the time-modification and tuplet elements to be represented accurately.
time-modificationDefinition =
  element actual-notes {
    xsd:nonNegativeInteger
    >> a:documentation [
         "The actual-notes element describes how many notes are played in the time usually occupied by the number in the normal-notes element."
       ]
  },
  element normal-notes {
    xsd:nonNegativeInteger
    >> a:documentation [
         "The normal-notes element describes how many notes are usually played in the time occupied by the number in the actual-notes element."
       ]
  },
  (element normal-type {
     note-type-valueValues
     >> a:documentation [
          "If the type associated with the number in the normal-notes element is different than the current note type (e.g., a quarter note within an eighth note triplet), then the normal-notes type (e.g. eighth) is specified in the normal-type and normal-dot elements."
        ]
   },
   element normal-dot { empty }*)?

##	The tremolo ornament can be used to indicate either single-note or double-note tremolos. Single-note tremolos use the single type, while double-note tremolos use the start and stop types. The default is "single" for compatibility with Version 1.1. The text of the element indicates the number of tremolo marks and is an integer from 0 to 8. Note that the number of attached beams is not included in this value, but is represented separately using the beam element.
## 
## When using double-note tremolos, the duration of each note in the tremolo should correspond to half of the notated type value. A time-modification element should also be added with an actual-notes value of 2 and a normal-notes value of 1. If used within a tuplet, this 2/1 ratio should be multiplied by the existing tuplet ratio.
## 
## Using repeater beams for indicating tremolos is deprecated as of MusicXML 3.0.
tremoloDefinition =
  tremolo-marksValues,
  attribute type { start-stop-singleValues }?,
  print-styleAttributes,
  placementAttributes

## A tuplet element is present when a tuplet is to be displayed graphically, in addition to the sound data provided by the time-modification elements. The number attribute is used to distinguish nested tuplets. The bracket attribute is used to indicate the presence of a bracket. If unspecified, the results are implementation-dependent. The line-shape attribute is used to specify whether the bracket is straight or in the older curved or slurred style. It is straight by default.
##	
## Whereas a time-modification element shows how the cumulative, sounding effect of tuplets and double-note tremolos compare to the written note type, the tuplet element describes how this is displayed. The tuplet element also provides more detailed representation information than the time-modification element, and is needed to represent nested tuplets and other complex tuplets accurately. 
##	
## The show-number attribute is used to display either the number of actual notes, the number of both actual and normal notes, or neither. It is actual by default. The show-type attribute is used to display either the actual type, both the actual and normal types, or neither. It is none by default.
tupletDefinition =
  element tuplet-actual {
    tuplet-portionDefinition
    >> a:documentation [
         "The tuplet-actual element provide optional full control over how the actual part of the tuplet is displayed, including number and note type (with dots). If any of these elements are absent, their values are based on the time-modification element."
       ]
  }?,
  element tuplet-normal {
    tuplet-portionDefinition
    >> a:documentation [
         "The tuplet-normal element provide optional full control over how the normal part of the tuplet is displayed, including number and note type (with dots). If any of these elements are absent, their values are based on the time-modification element."
       ]
  }?,
  attribute type { start-stopValues },
  attribute number { number-levelValues }?,
  attribute bracket { yes-noValues }?,
  attribute show-number { show-tupletValues }?,
  attribute show-type { show-tupletValues }?,
  line-shapeAttributes,
  positionAttributes,
  placementAttributes

## The tuplet-dot type is used to specify dotted normal tuplet types.
tuplet-dotDefinition = fontAttributes, colorAttributes

## The tuplet-number type indicates the number of notes for this portion of the tuplet.
tuplet-numberDefinition =
  xsd:nonNegativeInteger, fontAttributes, colorAttributes

## The tuplet-portion type provides optional full control over tuplet specifications. It allows the number and note type (including dots) to be set for the actual and normal portions of a single tuplet. If any of these elements are absent, their values are based on the time-modification element.
tuplet-portionDefinition =
  element tuplet-number { tuplet-numberDefinition }?,
  element tuplet-type { tuplet-typeDefinition }?,
  element tuplet-dot { tuplet-dotDefinition }*

## The tuplet-type type indicates the graphical note type of the notes for this portion of the tuplet.
tuplet-typeDefinition =
  note-type-valueValues, fontAttributes, colorAttributes

## The unpitched type represents musical elements that are notated on the staff but lack definite pitch, such as unpitched percussion and speaking voice.
unpitchedDefinition = display-step-octaveGroup?

## The credit type represents the appearance of the title, composer, arranger, lyricist, copyright, dedication, and other text and graphics that commonly appears on the first page of a score. The credit-words and credit-image elements are similar to the words and image elements for directions. However, since the credit is not part of a measure, the default-x and default-y attributes adjust the origin relative to the bottom left-hand corner of the first page. The enclosure for credit-words is none by default.
##	
## By default, a series of credit-words elements within a single credit element follow one another in sequence visually. Non-positional formatting attributes are carried over from the previous element by default.
##	
## The page attribute for the credit element, new in Version 2.0, specifies the page number where the credit should appear. This is an integer value that starts with 1 for the first page. Its value is 1 by default. Since credits occur before the music, these page numbers do not refer to the page numbering specified by the print element's page-number attribute.
## 
## The credit-type element, new in Version 3.0, indicates the purpose behind a credit. Multiple types of data may be combined in a single credit, so multiple elements may be used. Standard values include page number, title, subtitle, composer, arranger, lyricist, and rights.
##
creditDefinition =
  element credit-type { xsd:string }*,
  element link { linkDefinition }*,
  element bookmark { bookmarkDefinition }*,
  (element credit-image { imageDefinition }
   | (element credit-words { formatted-textDefinition },
      (element link { linkDefinition }*,
       element bookmark { bookmarkDefinition }*,
       element credit-words { formatted-textDefinition })*)),
  attribute page { xsd:positiveInteger }?

## The defaults type specifies score-wide defaults for scaling, layout, and appearance.
defaultsDefinition =
  element scaling { scalingDefinition }?,
  layoutGroup,
  element appearance { appearanceDefinition }?,
  element music-font { empty-fontDefinition }?,
  element word-font { empty-fontDefinition }?,
  element lyric-font { lyric-fontDefinition }*,
  element lyric-language { lyric-languageDefinition }*

## The empty-font type represents an empty element with font attributes.
empty-fontDefinition = fontAttributes

## The group-barline type indicates if the group should have common barlines.
group-barlineDefinition = group-barline-valueValues, colorAttributes

## The group-name type describes the name or abbreviation of a part-group element. Formatting attributes in the group-name type are deprecated in Version 2.0 in favor of the new group-name-display and group-abbreviation-display elements.
group-nameDefinition = xsd:string, group-name-textAttributes

## The group-symbol type indicates how the symbol for a group is indicated in the score.
group-symbolDefinition =
  group-symbol-valueValues, positionAttributes, colorAttributes

## The lyric-font type specifies the default font for a particular name and number of lyric.
lyric-fontDefinition =
  attribute number { xsd:NMTOKEN }?,
  attribute name { xsd:token }?,
  fontAttributes

## The lyric-language type specifies the default language for a particular name and number of lyric.
lyric-languageDefinition =
  attribute number { xsd:NMTOKEN }?,
  attribute name { xsd:token }?,
  xml.lang.attrib

## The opus type represents a link to a MusicXML opus document that composes multiple MusicXML scores into a collection.
opusDefinition = link-attributesAttributes

## The part-group element indicates groupings of parts in the score, usually indicated by braces and brackets. Braces that are used for multi-staff parts should be defined in the attributes element for that part. The part-group start element appears before the first score-part in the group. The part-group stop element appears after the last score-part in the group.
##	
## The number attribute is used to distinguish overlapping and nested part-groups, not the sequence of groups. As with parts, groups can have a name and abbreviation. Values for the child elements are ignored at the stop of a group. 
##	
## A part-group element is not needed for a single multi-staff part. By default, multi-staff parts include a brace symbol and (if appropriate given the bar-style) common barlines. The symbol formatting for a multi-staff part can be more fully specified using the part-symbol element.
part-groupDefinition =
  element group-name { group-nameDefinition }?,
  element group-name-display {
    name-displayDefinition
    >> a:documentation [
         "Formatting specified in the group-name-display element overrides formatting specified in the group-name element."
       ]
  }?,
  element group-abbreviation { group-nameDefinition }?,
  element group-abbreviation-display {
    name-displayDefinition
    >> a:documentation [
         "Formatting specified in the group-abbreviation-display element overrides formatting specified in the group-abbreviation element."
       ]
  }?,
  element group-symbol { group-symbolDefinition }?,
  element group-barline { group-barlineDefinition }?,
  element group-time { empty }?,
  editorialGroup,
  attribute type { start-stopValues },
  attribute number { xsd:token }?

## The part-list identifies the different musical parts in this movement. Each part has an ID that is used later within the musical data. Since parts may be encoded separately and combined later, identification elements are present at both the score and score-part levels. There must be at least one score-part, combined as desired with part-group elements that indicate braces and brackets. Parts are ordered from top to bottom in a score based on the order in which they appear in the part-list.
part-listDefinition =
  part-groupGroup*,
  score-partGroup,
  (part-groupGroup | score-partGroup)*

## The part-name type describes the name or abbreviation of a score-part element. Formatting attributes for the part-name element are deprecated in Version 2.0 in favor of the new part-name-display and part-abbreviation-display elements.
part-nameDefinition = xsd:string, part-name-textAttributes

## The score-instrument type represents a single instrument within a score-part. As with the score-part type, each score-instrument has a required ID attribute, a name, and an optional abbreviation.
##	
## A score-instrument type is also required if the score specifies MIDI 1.0 channels, banks, or programs. An initial midi-instrument assignment can also be made here. MusicXML software should be able to automatically assign reasonable channels and instruments without these elements in simple cases, such as where part names match General MIDI instrument names.
score-instrumentDefinition =
  element instrument-name {
    xsd:string
    >> a:documentation [
         "The instrument-name element is typically used within a software application, rather than appearing on the printed page of a score."
       ]
  },
  element instrument-abbreviation {
    xsd:string
    >> a:documentation [
         "The optional instrument-abbreviation element is typically used within a software application, rather than appearing on the printed page of a score."
       ]
  }?,
  element instrument-sound {
    xsd:string
    >> a:documentation [
         "The instrument-sound element describes the default timbre of the score-instrument. This description is independent of a particular virtual or MIDI instrument specification and allows playback to be shared more easily between applications and libraries."
       ]
  }?,
  (element solo { empty }
   | element ensemble {
       positive-integer-or-emptyValues
       >> a:documentation [
            "The ensemble element was added in Version 2.0. It is present if performance is intended by an ensemble such as an orchestral section. The text of the ensemble element contains the size of the section, or is empty if the ensemble size is not specified."
          ]
     })?,
  element virtual-instrument { virtual-instrumentDefinition }?,
  attribute id { xsd:ID }

## Each MusicXML part corresponds to a track in a Standard MIDI Format 1 file. The score-instrument elements are used when there are multiple instruments per track. The midi-device element is used to make a MIDI device or port assignment for the given track or specific MIDI instruments. Initial midi-instrument assignments may be made here as well.
score-partDefinition =
  element identification { identificationDefinition }?,
  element part-name { part-nameDefinition },
  element part-name-display { name-displayDefinition }?,
  element part-abbreviation { part-nameDefinition }?,
  element part-abbreviation-display { name-displayDefinition }?,
  element group {
    xsd:string
    >> a:documentation [
         "The group element allows the use of different versions of the part for different purposes. Typical values include score, parts, sound, and data. Ordering information that is directly encoded in MuseData can be derived from the ordering within a MusicXML score or opus."
       ]
  }*,
  element score-instrument { score-instrumentDefinition }*,
  (element midi-device { midi-deviceDefinition }?,
   element midi-instrument { midi-instrumentDefinition }?)*,
  attribute id { xsd:ID }

## The virtual-instrument element defines a specific virtual instrument used for an instrument sound.
virtual-instrumentDefinition =
  element virtual-library {
    xsd:string
    >> a:documentation [
         "The virtual-library element indicates the virtual instrument library name."
       ]
  }?,
  element virtual-name {
    xsd:string
    >> a:documentation [
         "The virtual-name element indicates the library-specific name for the virtual instrument."
       ]
  }?

## Works are optionally identified by number and title. The work type also may indicate a link to the opus document that composes multiple scores into a collection.
workDefinition =
  element work-number {
    xsd:string
    >> a:documentation [
         "The work-number element specifies the number of a work, such as its opus number."
       ]
  }?,
  element work-title {
    xsd:string
    >> a:documentation [
         "The work-title element specifies the title of a work, not including its opus or other work number."
       ]
  }?,
  element opus { opusDefinition }?

## The above-below type is used to indicate whether one element appears above or below another element.
above-belowValues = "above" | "below"

## The MusicXML format supports six levels of beaming, up to 1024th notes. Unlike the number-level type, the beam-level type identifies concurrent beams in a beam group. It does not distinguish overlapping beams such as grace notes within regular notes, or beams used in different voices.
beam-levelValues =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "8" }

## The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
## 
## For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
## 
## As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).
colorValues = xsd:token { pattern = "#[\dA-F]{6}([\dA-F][\dA-F])?" }

## The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.
comma-separated-textValues = xsd:token { pattern = "[^,]+(, ?[^,]+)*" }

## The css-font-size type includes the CSS font sizes used as an alternative to a numeric point size.
css-font-sizeValues =
  "xx-small"
  | "x-small"
  | "small"
  | "medium"
  | "large"
  | "x-large"
  | "xx-large"

## The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.
divisionsValues = xsd:decimal

## The enclosure-shape type describes the shape and presence / absence of an enclosure around text or symbols. A bracket enclosure is similar to a rectangle with the bottom line missing, as is common in jazz notation.
enclosure-shapeValues =
  "rectangle"
  | "square"
  | "oval"
  | "circle"
  | "bracket"
  | "triangle"
  | "diamond"
  | "none"

## The fermata-shape type represents the shape of the fermata sign. The empty value is equivalent to the normal value.
fermata-shapeValues = "normal" | "angled" | "square" | ""

## The font-size can be one of the CSS font sizes or a numeric point size.
font-sizeValues = xsd:decimal | css-font-sizeValues

## The font-style type represents a simplified version of the CSS font-style property.
font-styleValues = "normal" | "italic"

## The font-weight type represents a simplified version of the CSS font-weight property.
font-weightValues = "normal" | "bold"

## The left-center-right type is used to define horizontal alignment and text justification.
left-center-rightValues = "left" | "center" | "right"

## The left-right type is used to indicate whether one element appears to the left or the right of another element.
left-rightValues = "left" | "right"

## The line-shape type distinguishes between straight and curved lines.
line-shapeValues = "straight" | "curved"

## The line-type type distinguishes between solid, dashed, dotted, and wavy lines.
line-typeValues = "solid" | "dashed" | "dotted" | "wavy"

## The midi-16 type is used to express MIDI 1.0 values that range from 1 to 16.
midi-16Values =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "16" }

## The midi-16 type is used to express MIDI 1.0 values that range from 1 to 128.
midi-128Values =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "128" }

## The midi-16 type is used to express MIDI 1.0 values that range from 1 to 16,384.
midi-16384Values =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "16384" }

## The mute type represents muting for different instruments, including brass, winds, and strings. The on and off values are used for undifferentiated mutes. The remaining values represent specific mutes.
muteValues =
  "on"
  | "off"
  | "straight"
  | "cup"
  | "harmon-no-stem"
  | "harmon-stem"
  | "bucket"
  | "plunger"
  | "hat"
  | "solotone"
  | "practice"
  | "stop-mute"
  | "stop-hand"
  | "echo"
  | "palm"

## The non-negative-decimal type specifies a non-negative decimal value.
non-negative-decimalValues = xsd:decimal { minInclusive = "0" }

## Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML document order. When a number-level value is implied, the value is 1 by default.
number-levelValues =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "6" }

## The number-of-lines type is used to specify the number of lines in text decoration attributes.
number-of-linesValues =
  xsd:nonNegativeInteger { minInclusive = "0" maxInclusive = "3" }

## The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.
number-or-normalValues = "normal" | xsd:decimal

## The over-under type is used to indicate whether the tips of curved lines such as slurs and ties are overhand (tips down) or underhand (tips up).
over-underValues = "over" | "under"

## The percent type specifies a percentage from 0 to 100.
percentValues = xsd:decimal { minInclusive = "0" maxInclusive = "100" }

## The positive-decimal type specifies a positive decimal value.
positive-decimalValues = xsd:decimal { minExclusive = "0" }

## The positive-divisions type restricts divisions values to positive numbers.
positive-divisionsValues = divisionsValues

## The positive-integer-or-empty values can be either a positive integer or an empty string.
positive-integer-or-emptyValues = "" | xsd:positiveInteger

## The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.
rotation-degreesValues =
  xsd:decimal { minInclusive = "-180" maxInclusive = "180" }

## The semi-pitched type represents categories of indefinite pitch for percussion instruments.
semi-pitchedValues =
  "high" | "medium-high" | "medium" | "medium-low" | "low" | "very-low"

## The start-note type describes the starting note of trills and mordents for playback, relative to the current note.
start-noteValues = "upper" | "main" | "below"

## The start-stop type is used for an attribute of musical elements that can either start or stop, such as tuplets.
##									
## The values of start and stop refer to how an element appears in musical score order, not in MusicXML document order. An element with a stop attribute may precede the corresponding element with a start attribute within a MusicXML document. This is particularly common in multi-staff music. For example, the stopping point for a tuplet may appear in staff 1 before the starting point for the tuplet appears in staff 2 later in the document.
start-stopValues = "start" | "stop"

## The start-stop-continue type is used for an attribute of musical elements that can either start or stop, but also need to refer to an intermediate point in the symbol, as for complex slurs or for formatting of symbols across system breaks.
##						
## The values of start, stop, and continue refer to how an element appears in musical score order, not in MusicXML document order. An element with a stop attribute may precede the corresponding element with a start attribute within a MusicXML document. This is particularly common in multi-staff music. For example, the stopping point for a slur may appear in staff 1 before the starting point for the slur appears in staff 2 later in the document.
start-stop-continueValues = "start" | "stop" | "continue"

## The start-stop-single type is used for an attribute of musical elements that can be used for either multi-note or single-note musical elements, as for tremolos.
start-stop-singleValues = "start" | "stop" | "single"

## The string-number type indicates a string number. Strings are numbered from high to low, with 1 being the highest pitched string.
string-numberValues = xsd:positiveInteger

## The symbol-size type is used to indicate full vs. cue-sized vs. oversized symbols. The large value for oversized symbols was added in version 1.1.
symbol-sizeValues = "full" | "cue" | "large"

## The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
## 
## Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.
tenthsValues = xsd:decimal

## The text-direction type is used to adjust and override the Unicode bidirectional text algorithm, similar to the W3C Internationalization Tag Set recommendation. Values are ltr (left-to-right embed), rtl (right-to-left embed), lro (left-to-right bidi-override), and rlo (right-to-left bidi-override). The default value is ltr. This type is typically used by applications that store text in left-to-right visual order rather than logical order. Such applications can use the lro value to better communicate with other applications that more fully support bidirectional text.
text-directionValues = "ltr" | "rtl" | "lro" | "rlo"

## The time-only type is used to indicate that a particular playback-related element only applies particular times through a repeated section. The value is a comma-separated list of positive integers arranged in ascending order, indicating which times through the repeated section that the element applies.
time-onlyValues = xsd:token { pattern = "[1-9][0-9]*(, ?[1-9][0-9]*)*" }

## The top-bottom type is used to indicate the top or bottom part of a vertical shape like non-arpeggiate.
top-bottomValues = "top" | "bottom"

## The trill-beats type specifies the beats used in a trill-sound or bend-sound attribute group. It is a decimal value with a minimum value of 2.
trill-beatsValues = xsd:decimal { minInclusive = "2" }

## The trill-step type describes the alternating note of trills and mordents for playback, relative to the current note.
trill-stepValues = "whole" | "half" | "unison"

## The two-note-turn type describes the ending notes of trills and mordents for playback, relative to the current note.
two-note-turnValues = "whole" | "half" | "none"

## The up-down type is used for the direction of arrows and other pointed symbols like vertical accents, indicating which way the tip is pointing.
up-downValues = "up" | "down"

## The upright-inverted type describes the appearance of a fermata element. The value is upright if not specified.
upright-invertedValues = "upright" | "inverted"

## The valign type is used to indicate vertical alignment to the top, middle, bottom, or baseline of the text. Defaults are implementation-dependent.
valignValues = "top" | "middle" | "bottom" | "baseline"

## The valign-image type is used to indicate vertical alignment for images and graphics, so it does not include a baseline value. Defaults are implementation-dependent.
valign-imageValues = "top" | "middle" | "bottom"

## The yes-no type is used for boolean-like attributes. We cannot use W3C XML Schema booleans due to their restrictions on expression of boolean values.
yes-noValues = "yes" | "no"

## The yes-no-number type is used for attributes that can be either boolean or numeric values.
yes-no-numberValues = yes-noValues | xsd:decimal

## Calendar dates are represented yyyy-mm-dd format, following ISO 8601. This is a W3C XML Schema date type, but without the optional timezone data.
yyyy-mm-ddValues = xsd:date { pattern = "[^:Z]*" }

## The cancel-location type is used to indicate where a key signature cancellation appears relative to a new key signature: to the left, to the right, or before the barline and to the left. It is left by default. For mid-measure key elements, a cancel-location of before-barline should be treated like a cancel-location of left.
cancel-locationValues = "left" | "right" | "before-barline"

## The clef-sign element represents the different clef symbols. The jianpu sign indicates that the music that follows should be in jianpu numbered notation, just as the TAB sign indicates that the music that follows should be in tablature notation. Unlike TAB, a jianpu sign does not correspond to a visual clef notation.
clef-signValues =
  "G" | "F" | "C" | "percussion" | "TAB" | "jianpu" | "none"

## The fifths type represents the number of flats or sharps in a traditional key signature. Negative numbers are used for flats and positive numbers for sharps, reflecting the key's placement within the circle of fifths (hence the type name).
fifthsValues = xsd:integer

## The mode type is used to specify major/minor and other mode distinctions. Valid mode values include major, minor, dorian, phrygian, lydian, mixolydian, aeolian, ionian, locrian, and none.
modeValues = xsd:string

## The show-frets type indicates whether to show tablature frets as numbers (0, 1, 2) or letters (a, b, c). The default choice is numbers.
show-fretsValues = "numbers" | "letters"

## The staff-line type indicates the line on a given staff. Staff lines are numbered from bottom to top, with 1 being the bottom line on a staff. Staff line values can be used to specify positions outside the staff, such as a C clef positioned in the middle of a grand staff.
staff-lineValues = xsd:integer

## The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.
staff-numberValues = xsd:positiveInteger

## The staff-type value can be ossia, cue, editorial, regular, or alternate. An alternate staff indicates one that shares the same musical data as the prior staff, but displayed differently (e.g., treble and bass clef, standard notation and tab).
staff-typeValues =
  "ossia" | "cue" | "editorial" | "regular" | "alternate"

## The time-relation type indicates the symbol used to represent the interchangeable aspect of dual time signatures.
time-relationValues =
  "parentheses" | "bracket" | "equals" | "slash" | "space" | "hyphen"

## The time-separator type indicates how to display the arrangement between the beats and beat-type values in a time signature. The default value is none. The horizontal, diagonal, and vertical values represent horizontal, diagonal lower-left to upper-right, and vertical lines respectively. For these values, the beats and beat-type values are arranged on either side of the separator line. The none value represents no separator with the beats and beat-type arranged vertically. The adjacent value represents no separator with the beats and beat-type arranged horizontally.
time-separatorValues =
  "none" | "horizontal" | "diagonal" | "vertical" | "adjacent"

## The time-symbol type indicates how to display a time signature. The normal value is the usual fractional display, and is the implied symbol type if none is specified. Other options are the common and cut time symbols, as well as a single number with an implied denominator. The note symbol indicates that the beat-type should be represented with the corresponding downstem note rather than a number. The dotted-note symbol indicates that the beat-type should be represented with a dotted downstem note that corresponds to three times the beat-type value, and a numerator that is one third the beats value.
time-symbolValues =
  "common" | "cut" | "single-number" | "note" | "dotted-note" | "normal"

## The backward-forward type is used to specify repeat directions. The start of the repeat has a forward direction while the end of the repeat has a backward direction.
backward-forwardValues = "backward" | "forward"

## The bar-style type represents barline style information. Choices are regular, dotted, dashed, heavy, light-light, light-heavy, heavy-light, heavy-heavy, tick (a short stroke through the top line), short (a partial barline between the 2nd and 4th lines), and none.
bar-styleValues =
  "regular"
  | "dotted"
  | "dashed"
  | "heavy"
  | "light-light"
  | "light-heavy"
  | "heavy-light"
  | "heavy-heavy"
  | "tick"
  | "short"
  | "none"

## The ending-number type is used to specify either a comma-separated list of positive integers without leading zeros, or a string of zero or more spaces. It is used for the number attribute of the ending element. The zero or more spaces version is used when software knows that an ending is present, but cannot determine the type of the ending.
ending-numberValues =
  xsd:token { pattern = "([ ]*)|([1-9][0-9]*(, ?[1-9][0-9]*)*)" }

## The right-left-middle type is used to specify barline location.
right-left-middleValues = "right" | "left" | "middle"

## The start-stop-discontinue type is used to specify ending types. Typically, the start type is associated with the left barline of the first measure in an ending. The stop and discontinue types are associated with the right barline of the last measure in an ending. Stop is used when the ending mark concludes with a downward jog, as is typical for first endings. Discontinue is used when there is no downward jog, as is typical for second endings that do not conclude a piece.
start-stop-discontinueValues = "start" | "stop" | "discontinue"

## The winged attribute indicates whether the repeat has winged extensions that appear above and below the barline. The straight and curved values represent single wings, while the double-straight and double-curved values represent double wings. The none value indicates no wings and is the default.
wingedValues =
  "none" | "straight" | "curved" | "double-straight" | "double-curved"

## The accordion-middle type may have values of 1, 2, or 3, corresponding to having 1 to 3 dots in the middle section of the accordion registration symbol.
accordion-middleValues =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "3" }

## The beater-value type represents pictograms for beaters, mallets, and sticks that do not have different materials represented in the pictogram. The finger and hammer values are in addition to Stone's list.
beater-valueValues =
  "bow"
  | "chime hammer"
  | "coin"
  | "finger"
  | "fingernail"
  | "fist"
  | "guiro scraper"
  | "hammer"
  | "hand"
  | "jazz stick"
  | "knitting needle"
  | "metal hammer"
  | "snare stick"
  | "spoon mallet"
  | "triangle beater"
  | "triangle beater plain"
  | "wire brush"

## The degree-symbol-value type indicates indicates that a symbol should be used in specifying the degree.
degree-symbol-valueValues =
  "major" | "minor" | "augmented" | "diminished" | "half-diminished"

## The degree-type-value type indicates whether the current degree element is an addition, alteration, or subtraction to the kind of the current chord in the harmony element.
degree-type-valueValues = "add" | "alter" | "subtract"

## The effect type represents pictograms for sound effect percussion instruments. The cannon value is in addition to Stone's list.
effectValues =
  "anvil"
  | "auto horn"
  | "bird whistle"
  | "cannon"
  | "duck call"
  | "gun shot"
  | "klaxon horn"
  | "lions roar"
  | "police whistle"
  | "siren"
  | "slide whistle"
  | "thunder sheet"
  | "wind machine"
  | "wind whistle"

## The glass type represents pictograms for glass percussion instruments.
glassValues = "wind chimes"

## The harmony-type type differentiates different types of harmonies when alternate harmonies are possible. Explicit harmonies have all note present in the music; implied have some notes missing but implied; alternate represents alternate analyses.
harmony-typeValues = "explicit" | "implied" | "alternate"

## A kind-value indicates the type of chord. Degree elements can then add, subtract, or alter from these starting points. Values include:
##	
## Triads:
##	major (major third, perfect fifth)
##	minor (minor third, perfect fifth)
##	augmented (major third, augmented fifth)
##	diminished (minor third, diminished fifth)
## Sevenths:
##	dominant (major triad, minor seventh)
##	major-seventh (major triad, major seventh)
##	minor-seventh (minor triad, minor seventh)
##	diminished-seventh (diminished triad, diminished seventh)
##	augmented-seventh (augmented triad, minor seventh)
##	half-diminished (diminished triad, minor seventh)
##	major-minor (minor triad, major seventh)
## Sixths:
##	major-sixth (major triad, added sixth)
##	minor-sixth (minor triad, added sixth)
## Ninths:
##	dominant-ninth (dominant-seventh, major ninth)
##	major-ninth (major-seventh, major ninth)
##	minor-ninth (minor-seventh, major ninth)
## 11ths (usually as the basis for alteration):
##	dominant-11th (dominant-ninth, perfect 11th)
##	major-11th (major-ninth, perfect 11th)
##	minor-11th (minor-ninth, perfect 11th)
## 13ths (usually as the basis for alteration):
##	dominant-13th (dominant-11th, major 13th)
##	major-13th (major-11th, major 13th)
##	minor-13th (minor-11th, major 13th)
## Suspended:
##	suspended-second (major second, perfect fifth)
##	suspended-fourth (perfect fourth, perfect fifth)
## Functional sixths:
##	Neapolitan
##	Italian
##	French
##	German
## Other:
##	pedal (pedal-point bass)
##	power (perfect fifth)
##	Tristan
##	
## The "other" kind is used when the harmony is entirely composed of add elements. The "none" kind is used to explicitly encode absence of chords or functional harmony.
kind-valueValues =
  "major"
  | "minor"
  | "augmented"
  | "diminished"
  | "dominant"
  | "major-seventh"
  | "minor-seventh"
  | "diminished-seventh"
  | "augmented-seventh"
  | "half-diminished"
  | "major-minor"
  | "major-sixth"
  | "minor-sixth"
  | "dominant-ninth"
  | "major-ninth"
  | "minor-ninth"
  | "dominant-11th"
  | "major-11th"
  | "minor-11th"
  | "dominant-13th"
  | "major-13th"
  | "minor-13th"
  | "suspended-second"
  | "suspended-fourth"
  | "Neapolitan"
  | "Italian"
  | "French"
  | "German"
  | "pedal"
  | "power"
  | "Tristan"
  | "other"
  | "none"

## The line-end type specifies if there is a jog up or down (or both), an arrow, or nothing at the start or end of a bracket.
line-endValues = "up" | "down" | "both" | "arrow" | "none"

## The measure-numbering-value type describes how measure numbers are displayed on this part: no numbers, numbers every measure, or numbers every system.
measure-numbering-valueValues = "none" | "measure" | "system"

## The membrane type represents pictograms for membrane percussion instruments. The goblet drum value is in addition to Stone's list.
membraneValues =
  "bass drum"
  | "bass drum on side"
  | "bongos"
  | "conga drum"
  | "goblet drum"
  | "military drum"
  | "snare drum"
  | "snare drum snares off"
  | "tambourine"
  | "tenor drum"
  | "timbales"
  | "tomtom"

## The metal type represents pictograms for metal percussion instruments. The hi-hat value refers to a pictogram like Stone's high-hat cymbals but without the long vertical line at the bottom.
metalValues =
  "almglocken"
  | "bell"
  | "bell plate"
  | "brake drum"
  | "Chinese cymbal"
  | "cowbell"
  | "crash cymbals"
  | "crotale"
  | "cymbal tongs"
  | "domed gong"
  | "finger cymbals"
  | "flexatone"
  | "gong"
  | "hi-hat"
  | "high-hat cymbals"
  | "handbell"
  | "sistrum"
  | "sizzle cymbal"
  | "sleigh bells"
  | "suspended cymbal"
  | "tam tam"
  | "triangle"
  | "Vietnamese hat"

## The on-off type is used for notation elements such as string mutes.
on-offValues = "on" | "off"

## The pitched type represents pictograms for pitched percussion instruments. The chimes and tubular chimes values distinguish the single-line and double-line versions of the pictogram. The mallet value is in addition to Stone's list.
pitchedValues =
  "chimes"
  | "glockenspiel"
  | "mallet"
  | "marimba"
  | "tubular chimes"
  | "vibraphone"
  | "xylophone"

## The principal-voice-symbol type represents the type of symbol used to indicate the start of a principal or secondary voice. The "plain" value represents a plain square bracket. The value of "none" is used for analysis markup when the principal-voice element does not have a corresponding appearance in the score.
principal-voice-symbolValues =
  "Hauptstimme" | "Nebenstimme" | "plain" | "none"

## The start-stop-change-continue type is used to distinguish types of pedal directions.
start-stop-change-continueValues =
  "start" | "stop" | "change" | "continue"

## The tip-direction type represents the direction in which the tip of a stick or beater points, using Unicode arrow terminology.
tip-directionValues =
  "up"
  | "down"
  | "left"
  | "right"
  | "northwest"
  | "northeast"
  | "southeast"
  | "southwest"

## The stick-location type represents pictograms for the location of sticks, beaters, or mallets on cymbals, gongs, drums, and other instruments.
stick-locationValues = "center" | "rim" | "cymbal bell" | "cymbal edge"

## The stick-material type represents the material being displayed in a stick pictogram.
stick-materialValues = "soft" | "medium" | "hard" | "shaded" | "x"

## The stick-type type represents the shape of pictograms where the material
##	in the stick, mallet, or beater is represented in the pictogram.
stick-typeValues =
  "bass drum" | "double bass drum" | "timpani" | "xylophone" | "yarn"

## The up-down-stop-continue type is used for octave-shift elements, indicating the direction of the shift from their true pitched values because of printing difficulty.
up-down-stop-continueValues = "up" | "down" | "stop" | "continue"

## The wedge type is crescendo for the start of a wedge that is closed at the left side, diminuendo for the start of a wedge that is closed on the right side, and stop for the end of a wedge. The continue type is used for formatting wedges over a system break, or for other situations where a single wedge is divided into multiple segments.
wedge-typeValues = "crescendo" | "diminuendo" | "stop" | "continue"

## The wood type represents pictograms for wood percussion instruments. The maraca and maracas values distinguish the one- and two-maraca versions of the pictogram. The vibraslap and castanets values are in addition to Stone's list.
woodValues =
  "board clapper"
  | "cabasa"
  | "castanets"
  | "claves"
  | "guiro"
  | "log drum"
  | "maraca"
  | "maracas"
  | "ratchet"
  | "sandpaper blocks"
  | "slit drum"
  | "temple block"
  | "vibraslap"
  | "wood block"

## The distance-type defines what type of distance is being defined in a distance element. Values include beam and hyphen. This is left as a string so that other application-specific types can be defined, but it is made a separate type so that it can be redefined more strictly.
distance-typeValues = xsd:token

## The line-width-type defines what type of line is being defined in a line-width element. Values include beam, bracket, dashes, enclosure, ending, extend, heavy barline, leger, light barline, octave shift, pedal, slur middle, slur tip, staff, stem, tie middle, tie tip, tuplet bracket, and wedge. This is left as a string so that other application-specific types can be defined, but it is made a separate type so that it can be redefined more strictly.
line-width-typeValues = xsd:token

## The margin-type type specifies whether margins apply to even page, odd pages, or both.
margin-typeValues = "odd" | "even" | "both"

## The millimeters type is a number representing millimeters. This is used in the scaling element to provide a default scaling from tenths to physical units.
millimetersValues = xsd:decimal

## The note-size-type type indicates the type of note being defined by a note-size element. The grace type is used for notes of cue size that that include a grace element. The cue type is used for all other notes with cue size, whether defined explicitly or implicitly via a cue element. The large type is used for notes of large size.
note-size-typeValues = "cue" | "grace" | "large"

## The accidental-value type represents notated accidentals supported by MusicXML. In the MusicXML 2.0 DTD this was a string with values that could be included. The XSD strengthens the data typing to an enumerated list. The quarter- and three-quarters- accidentals are Tartini-style quarter-tone accidentals. The -down and -up accidentals are quarter-tone accidentals that include arrows pointing down or up. The slash- accidentals are used in Turkish classical music. The numbered sharp and flat accidentals are superscripted versions of the accidental signs, used in Turkish folk music. The sori and koron accidentals are microtonal sharp and flat accidentals used in Iranian and Persian music.
accidental-valueValues =
  "sharp"
  | "natural"
  | "flat"
  | "double-sharp"
  | "sharp-sharp"
  | "flat-flat"
  | "natural-sharp"
  | "natural-flat"
  | "quarter-flat"
  | "quarter-sharp"
  | "three-quarters-flat"
  | "three-quarters-sharp"
  | "sharp-down"
  | "sharp-up"
  | "natural-down"
  | "natural-up"
  | "flat-down"
  | "flat-up"
  | "triple-sharp"
  | "triple-flat"
  | "slash-quarter-sharp"
  | "slash-sharp"
  | "slash-flat"
  | "double-slash-flat"
  | "sharp-1"
  | "sharp-2"
  | "sharp-3"
  | "sharp-5"
  | "flat-1"
  | "flat-2"
  | "flat-3"
  | "flat-4"
  | "sori"
  | "koron"

## The arrow-direction type represents the direction in which an arrow points, using Unicode arrow terminology.
arrow-directionValues =
  "left"
  | "up"
  | "right"
  | "down"
  | "northwest"
  | "northeast"
  | "southeast"
  | "southwest"
  | "left right"
  | "up down"
  | "northwest southeast"
  | "northeast southwest"
  | "other"

## The arrow-style type represents the style of an arrow, using Unicode arrow terminology. Filled and hollow arrows indicate polygonal single arrows. Paired arrows are duplicate single arrows in the same direction. Combined arrows apply to double direction arrows like left right, indicating that an arrow in one direction should be combined with an arrow in the other direction.
arrow-styleValues =
  "single"
  | "double"
  | "filled"
  | "hollow"
  | "paired"
  | "combined"
  | "other"

## The beam-value type represents the type of beam associated with each of 8 beam levels (up to 1024th notes) available for each note.
beam-valueValues =
  "begin" | "continue" | "end" | "forward hook" | "backward hook"

## The breath-mark-value type represents the symbol used for a breath mark.
breath-mark-valueValues = "" | "comma" | "tick"

## The circular-arrow type represents the direction in which a circular arrow points, using Unicode arrow terminology.
circular-arrowValues = "clockwise" | "anticlockwise"

## The fan type represents the type of beam fanning present on a note, used to represent accelerandos and ritardandos.
fanValues = "accel" | "rit" | "none"

## The handbell-value type represents the type of handbell technique being notated.
handbell-valueValues =
  "damp"
  | "echo"
  | "gyro"
  | "hand martellato"
  | "mallet lift"
  | "mallet table"
  | "martellato"
  | "martellato lift"
  | "muted martellato"
  | "pluck lift"
  | "swing"

## The hole-closed-location type indicates which portion of the hole is filled in when the corresponding hole-closed-value is half.
hole-closed-locationValues = "right" | "bottom" | "left" | "top"

## The hole-closed-value type represents whether the hole is closed, open, or half-open.
hole-closed-valueValues = "yes" | "no" | "half"

## The note-type type is used for the MusicXML type element and represents the graphic note type, from 1024th (shortest) to maxima (longest).
note-type-valueValues =
  "1024th"
  | "512th"
  | "256th"
  | "128th"
  | "64th"
  | "32nd"
  | "16th"
  | "eighth"
  | "quarter"
  | "half"
  | "whole"
  | "breve"
  | "long"
  | "maxima"

## 
## The notehead type indicates shapes other than the open and closed ovals associated with note durations. The values do, re, mi, fa, fa up, so, la, and ti correspond to Aikin's 7-shape system.  The fa up shape is typically used with upstems; the fa shape is typically used with downstems or no stems.
## 
## The arrow shapes differ from triangle and inverted triangle by being centered on the stem. Slashed and back slashed notes include both the normal notehead and a slash. The triangle shape has the tip of the triangle pointing up; the inverted triangle shape has the tip of the triangle pointing down. The left triangle shape is a right triangle with the hypotenuse facing up and to the left.
notehead-valueValues =
  "slash"
  | "triangle"
  | "diamond"
  | "square"
  | "cross"
  | "x"
  | "circle-x"
  | "inverted triangle"
  | "arrow down"
  | "arrow up"
  | "slashed"
  | "back slashed"
  | "normal"
  | "cluster"
  | "circle dot"
  | "left triangle"
  | "rectangle"
  | "none"
  | "do"
  | "re"
  | "mi"
  | "fa"
  | "fa up"
  | "so"
  | "la"
  | "ti"

## Octaves are represented by the numbers 0 to 9, where 4 indicates the octave started by middle C.
octaveValues = xsd:integer { minInclusive = "0" maxInclusive = "9" }

## The semitones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) are used for microtones.
semitonesValues = xsd:decimal

## The show-tuplet type indicates whether to show a part of a tuplet relating to the tuplet-actual element, both the tuplet-actual and tuplet-normal elements, or neither.
show-tupletValues = "actual" | "both" | "none"

## The stem type represents the notated stem direction.
stem-valueValues = "down" | "up" | "double" | "none"

## The step type represents a step of the diatonic scale, represented using the English letters A through G.
stepValues = "A" | "B" | "C" | "D" | "E" | "F" | "G"

## Lyric hyphenation is indicated by the syllabic type. The single, begin, end, and middle values represent single-syllable words, word-beginning syllables, word-ending syllables, and mid-word syllables, respectively.
syllabicValues = "single" | "begin" | "end" | "middle"

## The number of tremolo marks is represented by a number from 0 to 8: the same as beam-level with 0 added.
tremolo-marksValues =
  xsd:integer { minInclusive = "0" maxInclusive = "8" }

## The group-barline-value type indicates if the group should have common barlines.
group-barline-valueValues = "yes" | "no" | "Mensurstrich"

## The group-symbol-value type indicates how the symbol for a group is indicated in the score. The default value is none.
group-symbol-valueValues =
  "none" | "brace" | "line" | "bracket" | "square"

## The bend-sound type is used for bend and slide elements, and is similar to the trill-sound attribute group. Here the beats element refers to the number of discrete elements (like MIDI pitch bends) used to represent a continuous bend or slide. The first-beat indicates the percentage of the direction for starting a bend; the last-beat the percentage for ending it. The default choices are:
##	
##	accelerate = "no"
##	beats = "4"
##	first-beat = "25"
##	last-beat = "75"
bend-soundAttributes =
  attribute accelerate { yes-noValues }?,
  attribute beats { trill-beatsValues }?,
  attribute first-beat { percentValues }?,
  attribute last-beat { percentValues }?

## The bezier attribute group is used to indicate the curvature of slurs and ties, representing the control points for a cubic bezier curve. For ties, the bezier attribute group is used with the tied element.
## 
## Normal slurs, S-shaped slurs, and ties need only two bezier points: one associated with the start of the slur or tie, the other with the stop. Complex slurs and slurs divided over system breaks can specify additional bezier data at slur elements with a continue type.
##	
## The bezier-offset, bezier-x, and bezier-y attributes describe the outgoing bezier point for slurs and ties with a start type, and the incoming bezier point for slurs and ties with types of stop or continue. The attributes bezier-offset2, bezier-x2, and bezier-y2 are only valid with slurs of type continue, and describe the outgoing bezier point.
##	
## The bezier-offset and bezier-offset2 attributes are measured in terms of musical divisions, like the offset element. These are the recommended attributes for specifying horizontal position. The other attributes are specified in tenths, relative to any position settings associated with the slur or tied element.
bezierAttributes =
  attribute bezier-offset { divisionsValues }?,
  attribute bezier-offset2 { divisionsValues }?,
  attribute bezier-x { tenthsValues }?,
  attribute bezier-y { tenthsValues }?,
  attribute bezier-x2 { tenthsValues }?,
  attribute bezier-y2 { tenthsValues }?

## The color attribute group indicates the color of an element.
colorAttributes = attribute color { colorValues }?

## The dashed-formatting entity represents the length of dashes and spaces in a dashed line. Both the dash-length and space-length attributes are represented in tenths. These attributes are ignored if the corresponding line-type attribute is not dashed.
dashed-formattingAttributes =
  attribute dash-length { tenthsValues }?,
  attribute space-length { tenthsValues }?

## The directive attribute changes the default-x position of a direction. It indicates that the left-hand side of the direction is aligned with the left-hand side of the time signature. If no time signature is present, it is aligned with the left-hand side of the first music notational element in the measure. If a default-x, justify, or halign attribute is present, it overrides the directive attribute.
directiveAttributes = attribute directive { yes-noValues }?

## The document-attributes attribute group is used to specify the attributes for an entire MusicXML document. Currently this is used for the version attribute.
## 
## The version attribute was added in Version 1.1 for the score-partwise and score-timewise documents. It provides an easier way to get version information than through the MusicXML public ID. The default value is 1.0 to make it possible for programs that handle later versions to distinguish earlier version files reliably. Programs that write MusicXML 1.1 or later files should set this attribute.
document-attributesAttributes = attribute version { xsd:token }?

## The enclosure attribute group is used to specify the formatting of an enclosure around text or symbols.
enclosureAttributes = attribute enclosure { enclosure-shapeValues }?

## The font attribute group gathers together attributes for determining the font within a credit or direction. They are based on the text styles for Cascading Style Sheets. The font-family is a comma-separated list of font names. These can be specific font styles such as Maestro or Opus, or one of several generic font styles: music, engraved, handwritten, text, serif, sans-serif, handwritten, cursive, fantasy, and monospace. The music, engraved, and handwritten values refer to music fonts; the rest refer to text fonts. The fantasy style refers to decorative text such as found in older German-style printing. The font-style can be normal or italic. The font-size can be one of the CSS sizes (xx-small, x-small, small, medium, large, x-large, xx-large) or a numeric point size. The font-weight can be normal or bold. The default is application-dependent, but is a text font vs. a music font.
fontAttributes =
  attribute font-family { comma-separated-textValues }?,
  attribute font-style { font-styleValues }?,
  attribute font-size { font-sizeValues }?,
  attribute font-weight { font-weightValues }?

## In cases where text extends over more than one line, horizontal alignment and justify values can be different. The most typical case is for credits, such as:
## 
##	Words and music by
##	  Pat Songwriter
## 
## Typically this type of credit is aligned to the right, so that the position information refers to the right-most part of the text. But in this example, the text is center-justified, not right-justified.
## 
## The halign attribute is used in these situations. If it is not present, its value is the same as for the justify attribute.
halignAttributes = attribute halign { left-center-rightValues }?

## The justify attribute is used to indicate left, center, or right justification. The default value varies for different elements. For elements where the justify attribute is present but the halign attribute is not, the justify attribute indicates horizontal alignment as well as justification.
justifyAttributes = attribute justify { left-center-rightValues }?

## The letter-spacing attribute specifies text tracking. Values are either "normal" or a number representing the number of ems to add between each letter. The number may be negative in order to subtract space. The default is normal, which allows flexibility of letter-spacing for purposes of text justification.
letter-spacingAttributes =
  attribute letter-spacing { number-or-normalValues }?

## The level-display attribute group specifies three common ways to indicate editorial indications: putting parentheses or square brackets around a symbol, or making the symbol a different size. If not specified, they are left to application defaults. It is used by the level and accidental elements.
level-displayAttributes =
  attribute parentheses { yes-noValues }?,
  attribute bracket { yes-noValues }?,
  attribute size { symbol-sizeValues }?

## The line-height attribute specifies text leading. Values are either "normal" or a number representing the percentage of the current font height to use for leading. The default is "normal". The exact normal value is implementation-dependent, but values between 100 and 120 are recommended.
line-heightAttributes =
  attribute line-height { number-or-normalValues }?

## The line-shape attribute distinguishes between straight and curved lines.
line-shapeAttributes = attribute line-shape { line-shapeValues }?

## The line-type attribute distinguishes between solid, dashed, dotted, and wavy lines.
line-typeAttributes = attribute line-type { line-typeValues }?

## The orientation attribute indicates whether slurs and ties are overhand (tips down) or underhand (tips up). This is distinct from the placement attribute used by any notation type.
orientationAttributes = attribute orientation { over-underValues }?

## The placement attribute indicates whether something is above or below another element, such as a note or a notation.
placementAttributes = attribute placement { above-belowValues }?

## The position attributes are based on MuseData print suggestions. For most elements, any program will compute a default x and y position. The position attributes let this be changed two ways. 
## 
## The default-x and default-y attributes change the computation of the default position. For most elements, the origin is changed relative to the left-hand side of the note or the musical position within the bar (x) and the top line of the staff (y).
## 
## For the following elements, the default-x value changes the origin relative to the start of the current measure:
## 
##	- note
##	- figured-bass
##	- harmony
##	- link
##	- directive
##	- measure-numbering
##	- all descendants of the part-list element
##	- all children of the direction-type element
## 
## This origin is from the start of the entire measure, at either the left barline or the start of the system.
## 
## When the default-x attribute is used within a child element of the part-name-display, part-abbreviation-display, group-name-display, or group-abbreviation-display elements, it changes the origin relative to the start of the first measure on the system. These values are used when the current measure or a succeeding measure starts a new system. The same change of origin is used for the group-symbol element.
## 
## For the note, figured-bass, and harmony elements, the default-x value is considered to have adjusted the musical position within the bar for its descendant elements.
## 
## Since the credit-words and credit-image elements are not related to a measure, in these cases the default-x and default-y attributes adjust the origin relative to the bottom left-hand corner of the specified page.
## 
## The relative-x and relative-y attributes change the position relative to the default position, either as computed by the individual program, or as overridden by the default-x and default-y attributes.
##	
## Positive x is right, negative x is left; positive y is up, negative y is down. All units are in tenths of interline space. For stems, positive relative-y lengthens a stem while negative relative-y shortens it.
## 
## The default-x and default-y position attributes provide higher-resolution positioning data than related features such as the placement attribute and the offset element. Applications reading a MusicXML file that can understand both features should generally rely on the default-x and default-y attributes for their greater accuracy. For the relative-x and relative-y attributes, the offset element, placement attribute, and directive attribute provide context for the relative position information, so the two features should be interpreted together.
## 
## As elsewhere in the MusicXML format, tenths are the global tenths defined by the scaling element, not the local tenths of a staff resized by the staff-size element.
positionAttributes =
  attribute default-x { tenthsValues }?,
  attribute default-y { tenthsValues }?,
  attribute relative-x { tenthsValues }?,
  attribute relative-y { tenthsValues }?

## The print-object attribute specifies whether or not to print an object (e.g. a note or a rest). It is yes by default.
print-objectAttributes = attribute print-object { yes-noValues }?

## The print-spacing attribute controls whether or not spacing is left for an invisible note or object. It is used only if no note, dot, or lyric is being printed. The value is yes (leave spacing) by default.
print-spacingAttributes = attribute print-spacing { yes-noValues }?

## The print-style attribute group collects the most popular combination of printing attributes: position, font, and color.
print-styleAttributes =
  positionAttributes, fontAttributes, colorAttributes

## The print-style-align attribute group adds the halign and valign attributes to the position, font, and color attributes.
print-style-alignAttributes =
  print-styleAttributes, halignAttributes, valignAttributes

## The printout attribute group collects the different controls over printing an object (e.g. a note or rest) and its parts, including augmentation dots and lyrics. This is especially useful for notes that overlap in different voices, or for chord sheets that contain lyrics and chords but no melody.
## 
## By default, all these attributes are set to yes. If print-object is set to no, the print-dot and print-lyric attributes are interpreted to also be set to no if they are not present.
printoutAttributes =
  print-objectAttributes,
  attribute print-dot { yes-noValues }?,
  print-spacingAttributes,
  attribute print-lyric { yes-noValues }?

## The text-decoration attribute group is based on the similar feature in XHTML and CSS. It allows for text to be underlined, overlined, or struck-through. It extends the CSS version by allow double or triple lines instead of just being on or off.
text-decorationAttributes =
  attribute underline { number-of-linesValues }?,
  attribute overline { number-of-linesValues }?,
  attribute line-through { number-of-linesValues }?

## The text-direction attribute is used to adjust and override the Unicode bidirectional text algorithm, similar to the W3C Internationalization Tag Set recommendation.
text-directionAttributes = attribute dir { text-directionValues }?

## The text-formatting attribute group collects the common formatting attributes for text elements. Default values may differ across the elements that use this group.
text-formattingAttributes =
  justifyAttributes,
  print-style-alignAttributes,
  text-decorationAttributes,
  text-rotationAttributes,
  letter-spacingAttributes,
  line-heightAttributes,
  xml.lang.attrib?,
  xml.space.attrib?,
  text-directionAttributes,
  enclosureAttributes

## The rotation attribute is used to rotate text around the alignment point specified by the halign and valign attributes. Positive values are clockwise rotations, while negative values are counter-clockwise rotations.
text-rotationAttributes = attribute rotation { rotation-degreesValues }?

## The trill-sound attribute group includes attributes used to guide the sound of trills, mordents, turns, shakes, and wavy lines, based on MuseData sound suggestions. The default choices are:
##	
##	start-note = "upper"
##	trill-step = "whole"
##	two-note-turn = "none"
##	accelerate = "no"
##	beats = "4".
##	
## Second-beat and last-beat are percentages for landing on the indicated beat, with defaults of 25 and 75 respectively.
##	
## For mordent and inverted-mordent elements, the defaults are different:
##	
##	The default start-note is "main", not "upper".
##	The default for beats is "3", not "4".
##	The default for second-beat is "12", not "25".
##	The default for last-beat is "24", not "75".
trill-soundAttributes =
  attribute start-note { start-noteValues }?,
  attribute trill-step { trill-stepValues }?,
  attribute two-note-turn { two-note-turnValues }?,
  attribute accelerate { yes-noValues }?,
  attribute beats { trill-beatsValues }?,
  attribute second-beat { percentValues }?,
  attribute last-beat { percentValues }?

## The valign attribute is used to indicate vertical alignment to the top, middle, bottom, or baseline of the text. Defaults are implementation-dependent.
valignAttributes = attribute valign { valignValues }?

## The valign-image attribute is used to indicate vertical alignment for images and graphics, so it removes the baseline value. Defaults are implementation-dependent.
valign-imageAttributes = attribute valign { valign-imageValues }?

## The x-position attribute group is used for elements like notes where specifying x position is common, but specifying y position is rare.
x-positionAttributes =
  attribute default-x { tenthsValues }?,
  attribute default-y { tenthsValues }?,
  attribute relative-x { tenthsValues }?,
  attribute relative-y { tenthsValues }?

## The y-position attribute group is used for elements like stems where specifying y position is common, but specifying x position is rare.
y-positionAttributes =
  attribute default-x { tenthsValues }?,
  attribute default-y { tenthsValues }?,
  attribute relative-x { tenthsValues }?,
  attribute relative-y { tenthsValues }?

## The image-attributes group is used to include graphical images in a score. The required source attribute is the URL for the image file. The required type attribute is the MIME type for the image file format. Typical choices include application/postscript, image/gif, image/jpeg, image/png, and image/tiff.
image-attributesAttributes =
  attribute source { xsd:anyURI },
  attribute type { xsd:token },
  positionAttributes,
  halignAttributes,
  valign-imageAttributes

## The print-attributes group is used by the print element. The new-system and new-page attributes indicate whether to force a system or page break, or to force the current music onto the same system or page as the preceding music. Normally this is the first music data within a measure. If used in multi-part music, they should be placed in the same positions within each part, or the results are undefined. The page-number attribute sets the number of a new page; it is ignored if new-page is not "yes". Version 2.0 adds a blank-page attribute. This is a positive integer value that specifies the number of blank pages to insert before the current measure. It is ignored if new-page is not "yes". These blank pages have no music, but may have text or images specified by the credit element. This is used to allow a combination of pages that are all text, or all text and images, together with pages of music.
## 
## The staff-spacing attribute specifies spacing between multiple staves in tenths of staff space. This is deprecated as of Version 1.1; the staff-layout element should be used instead. If both are present, the staff-layout values take priority.
print-attributesAttributes =
  attribute staff-spacing { tenthsValues }?,
  attribute new-system { yes-noValues }?,
  attribute new-page { yes-noValues }?,
  attribute blank-page { xsd:positiveInteger }?,
  attribute page-number { xsd:token }?

## The element and position attributes are new as of Version 2.0. They allow for bookmarks and links to be positioned at higher resolution than the level of music-data elements. When no element and position attributes are present, the bookmark or link element refers to the next sibling element in the MusicXML file. The element attribute specifies an element type for a descendant of the next sibling element that is not a link or bookmark. The position attribute specifies the position of this descendant element, where the first position is 1. The position attribute is ignored if the element attribute is not present. For instance, an element value of "beam" and a position value of "2" defines the link or bookmark to refer to the second beam descendant of the next sibling element that is not a link or bookmark. This is equivalent to an XPath test of [.//beam[2]] done in the context of the sibling element.
element-positionAttributes =
  attribute element { xsd:NMTOKEN }?,
  attribute position { xsd:positiveInteger }?

## The link-attributes group includes all the simple XLink attributes supported in the MusicXML format.
link-attributesAttributes =
  xlink.href.attrib,
  xlink.type.attrib?,
  xlink.role.attrib?,
  xlink.title.attrib?,
  xlink.show.attrib?,
  xlink.actuate.attrib?

## The group-name-text attribute group is used by the group-name and group-abbreviation elements. The print-style and justify attribute groups are deprecated in MusicXML 2.0 in favor of the new group-name-display and group-abbreviation-display elements.
group-name-textAttributes = print-styleAttributes, justifyAttributes

## The measure-attributes group is used by the measure element. Measures have a required number attribute (going from partwise to timewise, measures are grouped via the number).
##	
## The implicit attribute is set to "yes" for measures where the measure number should never appear, such as pickup measures and the last half of mid-measure repeats. The value is "no" if not specified.
##	
## The non-controlling attribute is intended for use in multimetric music like the Don Giovanni minuet. If set to "yes", the left barline in this measure does not coincide with the left barline of measures in other parts. The value is "no" if not specified. 
## 
## In partwise files, the number attribute should be the same for measures in different parts that share the same left barline. While the number attribute is often numeric, it does not have to be. Non-numeric values are typically used together with the implicit or non-controlling attributes being set to "yes". For a pickup measure, the number attribute is typically set to "0" and the implicit attribute is typically set to "yes". Further details about measure numbering can be defined using the measure-numbering element.
## 
## Measure width is specified in tenths. These are the global tenths specified in the scaling element, not local tenths as modified by the staff-size element.	The width covers the entire measure from barline or system start to barline or system end.
measure-attributesAttributes =
  attribute number { xsd:token },
  attribute implicit { yes-noValues }?,
  attribute non-controlling { yes-noValues }?,
  attribute width { tenthsValues }?

## In either partwise or timewise format, the part element has an id attribute that is an IDREF back to a score-part in the part-list.
part-attributesAttributes = attribute id { xsd:IDREF }

## The part-name-text attribute group is used by the part-name and part-abbreviation elements. The print-style and justify attribute groups are deprecated in MusicXML 2.0 in favor of the new part-name-display and part-abbreviation-display elements.
part-name-textAttributes =
  print-styleAttributes, print-objectAttributes, justifyAttributes
